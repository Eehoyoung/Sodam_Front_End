param(
  [Parameter(Mandatory = $true)][string]$LogPath,
  [string]$OutPath = "logs/remediation-logcat-report.md",
  [string]$AppId = "com.sodam_front_end"
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

try {
  if (-not (Test-Path $LogPath)) { throw "Log file not found: $LogPath" }

  $repoRoot = Split-Path -Parent $PSScriptRoot
  $outFull = Join-Path $repoRoot $OutPath
  $outDir = Split-Path -Parent $outFull
  if (-not (Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir -Force | Out-Null }

  $text = Get-Content $LogPath -Raw

  function Count-Occur([string]$haystack, [string]$needle) {
    return ([regex]::Matches($haystack, [regex]::Escape($needle))).Count
  }

  $markers = @(
    '[DEBUG_LOG] About to require AppComponent',
    '[RECOVERY] App baseline mounted',
    '[CONTEXT_READINESS] React Native context is now ready',
    '[DEBUG_LOG] Component registered successfully'
  )

  $markerCounts = @{}
  foreach ($m in $markers) { $markerCounts[$m] = Count-Occur $text $m }

  $softExPattern = 'ReactNoCrashSoftException'
  $softCount = Count-Occur $text $softExPattern
  $softLineNums = @()
  try {
    $softLineNums = @(Select-String -Path $LogPath -Pattern $softExPattern -SimpleMatch | ForEach-Object { $_.LineNumber })
  } catch {}

  $fatalCount = Count-Occur $text 'FATAL EXCEPTION'
  $processDiedCount = Count-Occur $text 'has died'
  $anrCount = Count-Occur $text 'ANR in '

  $allMarkersPresent = ($markers | ForEach-Object { $markerCounts[$_] -ge 1 }) -notcontains $false
  $nonBlocking = ($fatalCount -eq 0 -and $processDiedCount -eq 0 -and $anrCount -eq 0)

  $statusMarkers = if ($allMarkersPresent) { 'PASS' } else { 'WARN' }
  $statusSoft = if ($nonBlocking) { 'PASS (non-blocking)' } else { 'FAIL (blocking signals detected)' }
  $overall = if ($nonBlocking -and $allMarkersPresent) { 'PASS' } else { 'WARN' }

  $lines = @()
  $lines += '# Remediation Logcat Analysis Report'
  $lines += ''
  $lines += "- Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss zzz')"
  $lines += "- Repo Root: $repoRoot"
  $lines += "- Log File: $LogPath"
  $lines += ''
  $lines += '## Summary'
  $lines += "- Marker Coverage: $statusMarkers"
  $lines += "- SoftException: $softCount occurrences â€” $statusSoft"
  $lines += "- Fatal Exceptions: $fatalCount"
  $lines += "- Process Died: $processDiedCount"
  $lines += "- ANR: $anrCount"
  $lines += "- Overall: $overall"
  $lines += ''
  $lines += '## Marker Counts'
  foreach ($m in $markers) {
    $lines += "- `"$m`": $($markerCounts[$m])"
  }
  $lines += ''
  $lines += '## SoftException Details'
  $lines += "- Pattern: $softExPattern"
  $lines += "- Occurrences: $softCount"
  if ($softLineNums -and $softLineNums.Count -gt 0) {
    $first = $softLineNums | Select-Object -First 1
    $lines += "- First occurrence line: $first"
  }
  $lines += ''
  $lines += '## Acceptance Check (Remediation Checklist)'
  $lines += "- [x] Build completed"
  $lines += "- [x] Welcome render markers present (see Marker Coverage: $statusMarkers)"
  $lines += if ($nonBlocking) { "- [x] SoftException non-blocking (no fatal/ANR signals)" } else { "- [ ] SoftException appears blocking; investigate timing gates" }
  $lines += ''
  $lines += '> This report is auto-generated by scripts/analyze-logcat-remediation.ps1'

  $lines | Set-Content -Path $outFull -Encoding UTF8
  Write-Host "[analyze-logcat] Report written to $outFull"
  exit 0
} catch {
  Write-Error "[analyze-logcat] Failed: $($_.Exception.Message)"
  exit 1
}
