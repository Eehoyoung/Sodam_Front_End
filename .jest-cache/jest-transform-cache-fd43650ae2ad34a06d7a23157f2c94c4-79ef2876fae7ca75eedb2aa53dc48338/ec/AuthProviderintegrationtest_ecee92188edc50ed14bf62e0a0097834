15d157c74a8bf6fc3a536c4df8d1fdb7
"use strict";

_getJestObj().mock('../../../features/auth/services/authService', function () {
  return {
    default: {
      login: jest.fn(),
      logout: jest.fn(),
      kakaoLogin: jest.fn(),
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('../../../utils/safeLogger', function () {
  return {
    safeLogger: {
      error: jest.fn()
    }
  };
});
_getJestObj().mock('../../../common/utils/memoryStorage', function () {
  return {
    memoryStorage: {
      getItem: jest.fn(),
      setItem: jest.fn(),
      removeItem: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    default: {
      getItem: jest.fn(),
      setItem: jest.fn(),
      removeItem: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _AuthProvider = require("../providers/AuthProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthProvider Integration Tests', function () {
  var mockAuthService;
  var mockMemoryStorage;
  var wrapper = function wrapper(_ref) {
    var children = _ref.children;
    return (0, _jsxRuntime.jsx)(_AuthProvider.AuthProvider, {
      children: children
    });
  };
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
    mockAuthService = require('../../../features/auth/services/authService').default;
    mockMemoryStorage = require('../../../common/utils/memoryStorage').memoryStorage;
    mockMemoryStorage.getItem.mockResolvedValue(null);
    mockMemoryStorage.setItem.mockResolvedValue(undefined);
    mockMemoryStorage.removeItem.mockResolvedValue(undefined);
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  test('should initialize with default state', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.isFirstLaunch).toBe(true);
  });
  test('should provide all required methods', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook2.result;
    expect(typeof result.current.login).toBe('function');
    expect(typeof result.current.logout).toBe('function');
    expect(typeof result.current.kakaoLogin).toBe('function');
    expect(typeof result.current.setFirstLaunchComplete).toBe('function');
  });
  test('should handle initialization with no stored data', (0, _asyncToGenerator2.default)(function* () {
    mockMemoryStorage.getItem.mockResolvedValue(null);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(500);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.isAuthenticated).toBe(false);
  }));
  test('should handle successful login flow', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@example.com',
      name: 'Test User'
    };
    mockAuthService.login.mockResolvedValue({
      user: mockUser
    });
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.login('test@example.com', 'password');
    }));
    expect(mockAuthService.login).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'password'
    });
    expect(result.current.isAuthenticated).toBe(true);
    expect(result.current.user).toEqual(mockUser);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle login failure', (0, _asyncToGenerator2.default)(function* () {
    mockAuthService.login.mockRejectedValue(new Error('Invalid credentials'));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook5.result;
    yield expect((0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.login('test@example.com', 'wrong-password');
    }))).rejects.toThrow('Login failed');
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle logout flow', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@example.com',
      name: 'Test User'
    };
    mockAuthService.login.mockResolvedValue({
      user: mockUser
    });
    mockAuthService.logout.mockResolvedValue(undefined);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.login('test@example.com', 'password');
    }));
    expect(result.current.isAuthenticated).toBe(true);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.logout();
    }));
    expect(mockAuthService.logout).toHaveBeenCalled();
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle kakao login flow', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@kakao.com',
      name: 'Kakao User'
    };
    mockAuthService.kakaoLogin.mockResolvedValue({
      token: 'kakao-token'
    });
    mockAuthService.getCurrentUser.mockResolvedValue(mockUser);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook7.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.kakaoLogin('kakao-auth-code');
    }));
    expect(mockAuthService.kakaoLogin).toHaveBeenCalledWith('kakao-auth-code');
    expect(mockAuthService.getCurrentUser).toHaveBeenCalled();
    expect(result.current.isAuthenticated).toBe(true);
    expect(result.current.user).toEqual(mockUser);
  }));
  test('should handle first launch completion', (0, _asyncToGenerator2.default)(function* () {
    mockMemoryStorage.setItem.mockResolvedValue(undefined);
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook8.result;
    expect(result.current.isFirstLaunch).toBe(true);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.setFirstLaunchComplete();
    }));
    expect(mockMemoryStorage.setItem).toHaveBeenCalledWith('hasLaunched', 'true');
    expect(result.current.isFirstLaunch).toBe(false);
  }));
  test('should handle initialization timeout', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook9.result;
    expect(result.current.loading).toBe(true);
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(3000);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(result.current.loading).toBe(false);
  }));
  test('should handle no token found scenario without infinite loading', (0, _asyncToGenerator2.default)(function* () {
    mockMemoryStorage.getItem.mockResolvedValue(null);
    mockAuthService.getCurrentUser.mockRejectedValue(new Error('No token'));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook0.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(500);
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.isFirstLaunch).toBe(true);
  }));
  test('should maintain API compatibility with original AuthContext', function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }, {
        wrapper: wrapper
      }),
      result = _renderHook1.result;
    var expectedProperties = ['isAuthenticated', 'user', 'loading', 'isFirstLaunch', 'login', 'logout', 'kakaoLogin', 'setFirstLaunchComplete'];
    expectedProperties.forEach(function (prop) {
      expect(result.current).toHaveProperty(prop);
    });
    expect(typeof result.current.isAuthenticated).toBe('boolean');
    expect(typeof result.current.loading).toBe('boolean');
    expect(typeof result.current.isFirstLaunch).toBe('boolean');
    expect(typeof result.current.login).toBe('function');
    expect(typeof result.current.logout).toBe('function');
    expect(typeof result.current.kakaoLogin).toBe('function');
    expect(typeof result.current.setFirstLaunchComplete).toBe('function');
  });
  test('should handle useAuth outside provider gracefully', function () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _AuthProvider.useAuth)();
      }),
      result = _renderHook10.result;
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.loading).toBe(false);
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.login).toThrow;
    expect(result.current.logout).toThrow;
    expect(result.current.kakaoLogin).toThrow;
    expect(result.current.setFirstLaunchComplete).toThrow;
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,