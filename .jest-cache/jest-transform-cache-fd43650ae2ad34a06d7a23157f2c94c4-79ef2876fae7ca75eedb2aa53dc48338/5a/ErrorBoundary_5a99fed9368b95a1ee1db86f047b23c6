d11ed6df81c0cca4a5c4762eaa8d001b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ErrorBoundary = void 0;
exports.withErrorBoundary = withErrorBoundary;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _safeLogger = require("../utils/safeLogger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ErrorBoundary = exports.ErrorBoundary = function (_Component) {
  function ErrorBoundary(props) {
    var _this;
    (0, _classCallCheck2.default)(this, ErrorBoundary);
    _this = _callSuper(this, ErrorBoundary, [props]);
    _this.handleRetry = function () {
      console.log('[ErrorBoundary] Retrying after error...');
      _this.setState({
        hasError: false,
        error: undefined,
        errorInfo: undefined
      });
    };
    _this.handleRestart = function () {
      if (__DEV__) {
        console.log('[ErrorBoundary] Restarting app in development mode...');
        var g = typeof globalThis !== 'undefined' ? globalThis : {};
        if (g.window && g.window.location && typeof g.window.location.reload === 'function') {
          g.window.location.reload();
        }
      } else {
        console.log('[ErrorBoundary] App restart requested in production mode');
        _this.handleRetry();
      }
    };
    _this.state = {
      hasError: false
    };
    return _this;
  }
  (0, _inherits2.default)(ErrorBoundary, _Component);
  return (0, _createClass2.default)(ErrorBoundary, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      console.error('[ErrorBoundary] Component stack trace:', errorInfo.componentStack);
      this.setState({
        error: error,
        errorInfo: errorInfo
      });
      this.logErrorToService(error, errorInfo);
      if (this.props.onError) {
        this.props.onError(error, errorInfo);
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError) {
        if (this.props.fallback) {
          return this.props.fallback;
        }
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.container,
          children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
            contentContainerStyle: styles.scrollContent,
            children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.errorContainer,
              children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.iconContainer,
                children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.errorIcon,
                  children: "\u26A0\uFE0F"
                })
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.title,
                children: "\uBB38\uC81C\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
              }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.message,
                children: ["\uC608\uC0C1\uCE58 \uBABB\uD55C \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.", '\n', "\uC7A0\uC2DC \uD6C4 \uB2E4\uC2DC \uC2DC\uB3C4\uD574\uC8FC\uC138\uC694."]
              }), this.shouldShowErrorDetails() && this.state.error && (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.errorDetails,
                children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.errorDetailsTitle,
                  children: "\uAC1C\uBC1C\uC790 \uC815\uBCF4:"
                }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: styles.errorDetailsText,
                  children: [this.state.error.name, ": ", this.state.error.message]
                }), this.state.error.stack && (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.errorStack,
                  children: this.state.error.stack
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.buttonContainer,
                children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: [styles.button, styles.retryButton],
                  onPress: this.handleRetry,
                  activeOpacity: 0.7,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.retryButtonText,
                    children: "\uB2E4\uC2DC \uC2DC\uB3C4"
                  })
                }), __DEV__ && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
                  style: [styles.button, styles.restartButton],
                  onPress: this.handleRestart,
                  activeOpacity: 0.7,
                  children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                    style: styles.restartButtonText,
                    children: "\uC571 \uC7AC\uC2DC\uC791"
                  })
                })]
              }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                style: styles.helpText,
                children: ["\uBB38\uC81C\uAC00 \uACC4\uC18D \uBC1C\uC0DD\uD558\uBA74 \uC571\uC744 \uC7AC\uC2DC\uC791\uD558\uAC70\uB098", '\n', "\uACE0\uAC1D\uC13C\uD130\uC5D0 \uBB38\uC758\uD574\uC8FC\uC138\uC694."]
              })]
            })
          })
        });
      }
      return this.props.children;
    }
  }, {
    key: "logErrorToService",
    value: function logErrorToService(error, errorInfo) {
      try {
        var _navigator;
        _safeLogger.safeLogger.error('React Error Boundary caught an error', {
          error: {
            name: error.name,
            message: error.message,
            stack: error.stack
          },
          errorInfo: {
            componentStack: errorInfo.componentStack
          },
          timestamp: new Date().toISOString(),
          userAgent: typeof globalThis !== 'undefined' && ((_navigator = globalThis.navigator) == null ? void 0 : _navigator.userAgent) || 'React Native'
        });
        if (__DEV__) {
          console.group('[ErrorBoundary] Detailed Error Information');
          console.error('Error:', error);
          console.error('Error Info:', errorInfo);
          console.error('Component Stack:', errorInfo.componentStack);
          console.groupEnd();
        }
      } catch (loggingError) {
        console.error('[ErrorBoundary] Failed to log error:', loggingError);
      }
    }
  }, {
    key: "shouldShowErrorDetails",
    value: function shouldShowErrorDetails() {
      return __DEV__ || false;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      console.error('[ErrorBoundary] Error caught by boundary:', error);
      return {
        hasError: true,
        error: error
      };
    }
  }]);
}(_react.Component);
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa'
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  errorContainer: {
    alignItems: 'center',
    maxWidth: 400,
    width: '100%'
  },
  iconContainer: {
    marginBottom: 20
  },
  errorIcon: {
    fontSize: 64
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#212529',
    marginBottom: 12,
    textAlign: 'center'
  },
  message: {
    fontSize: 16,
    color: '#6c757d',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 30
  },
  errorDetails: {
    backgroundColor: '#f8d7da',
    borderColor: '#f5c6cb',
    borderWidth: 1,
    borderRadius: 8,
    padding: 16,
    marginBottom: 30,
    width: '100%'
  },
  errorDetailsTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#721c24',
    marginBottom: 8
  },
  errorDetailsText: {
    fontSize: 12,
    color: '#721c24',
    marginBottom: 8
  },
  errorStack: {
    fontSize: 10,
    color: '#721c24',
    fontFamily: 'monospace'
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 12,
    marginBottom: 20
  },
  button: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    minWidth: 120,
    alignItems: 'center'
  },
  retryButton: {
    backgroundColor: '#007bff'
  },
  retryButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600'
  },
  restartButton: {
    backgroundColor: '#6c757d'
  },
  restartButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600'
  },
  helpText: {
    fontSize: 14,
    color: '#6c757d',
    textAlign: 'center',
    lineHeight: 20
  }
});
function withErrorBoundary(Component, errorBoundaryProps) {
  var WrappedComponent = function WrappedComponent(props) {
    return (0, _jsxRuntime.jsx)(ErrorBoundary, Object.assign({}, errorBoundaryProps, {
      children: (0, _jsxRuntime.jsx)(Component, Object.assign({}, props))
    }));
  };
  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  return WrappedComponent;
}
var _default = exports.default = ErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,