{"version":3,"names":["describe","beforeEach","jest","resetModules","test","isolateModules","global","__DEV__","_require","require","errorMonitor","reportNetworkError","reportAsyncError","reports","getErrorReports","initialCount","length","expect","toBeGreaterThanOrEqual","networkReport","find","r","message","includes","toBeTruthy","occurrenceCount","resolved","toBe","recordPerformanceMetric","metrics","getPerformanceMetrics","metricX","toBeDefined","toBeGreaterThan"],"sources":["errorMonitoring.test.ts"],"sourcesContent":["/* Tests for errorMonitoring system */\r\n\r\ndescribe('errorMonitoring', () => {\r\n  beforeEach(() => {\r\n    jest.resetModules();\r\n  });\r\n\r\n  test('reports errors and aggregates occurrence counts; records performance metrics', () => {\r\n    jest.isolateModules(() => {\r\n      // Ensure __DEV__ true for enabling monitor\r\n      (global as any).__DEV__ = true;\r\n\r\n      const { errorMonitor, reportNetworkError, reportAsyncError } = require('../../utils/errorMonitoring');\r\n\r\n      // Initial reports\r\n      let reports = errorMonitor.getErrorReports();\r\n      const initialCount = reports.length;\r\n\r\n      // Report a network error twice\r\n      reportNetworkError('Network glitch');\r\n      reportNetworkError('Network glitch');\r\n\r\n      // Report an async error once\r\n      reportAsyncError('Unhandled promise rejection');\r\n\r\n      reports = errorMonitor.getErrorReports();\r\n      expect(reports.length).toBeGreaterThanOrEqual(initialCount + 2);\r\n\r\n      const networkReport = reports.find(r => r.message.includes('Network glitch'));\r\n      expect(networkReport).toBeTruthy();\r\n      expect(networkReport?.occurrenceCount).toBeGreaterThanOrEqual(2);\r\n      expect(networkReport?.resolved).toBe(false);\r\n\r\n      // Record a performance metric and check retrieval\r\n      errorMonitor.recordPerformanceMetric('metricX', 123);\r\n      const metrics = errorMonitor.getPerformanceMetrics();\r\n      expect(metrics.metricX).toBeDefined();\r\n      expect(metrics.metricX.length).toBeGreaterThan(0);\r\n      expect(metrics.metricX[metrics.metricX.length - 1]).toBe(123);\r\n    });\r\n  });\r\n});\r\n"],"mappings":";;AAEAA,QAAQ,CAAC,iBAAiB,EAAE,YAAM;EAChCC,UAAU,CAAC,YAAM;IACfC,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB,CAAC,CAAC;EAEFC,IAAI,CAAC,8EAA8E,EAAE,YAAM;IACzFF,IAAI,CAACG,cAAc,CAAC,YAAM;MAEvBC,MAAM,CAASC,OAAO,GAAG,IAAI;MAE9B,IAAAC,QAAA,GAA+DC,OAAO,CAAC,6BAA6B,CAAC;QAA7FC,YAAY,GAAAF,QAAA,CAAZE,YAAY;QAAEC,kBAAkB,GAAAH,QAAA,CAAlBG,kBAAkB;QAAEC,gBAAgB,GAAAJ,QAAA,CAAhBI,gBAAgB;MAG1D,IAAIC,OAAO,GAAGH,YAAY,CAACI,eAAe,CAAC,CAAC;MAC5C,IAAMC,YAAY,GAAGF,OAAO,CAACG,MAAM;MAGnCL,kBAAkB,CAAC,gBAAgB,CAAC;MACpCA,kBAAkB,CAAC,gBAAgB,CAAC;MAGpCC,gBAAgB,CAAC,6BAA6B,CAAC;MAE/CC,OAAO,GAAGH,YAAY,CAACI,eAAe,CAAC,CAAC;MACxCG,MAAM,CAACJ,OAAO,CAACG,MAAM,CAAC,CAACE,sBAAsB,CAACH,YAAY,GAAG,CAAC,CAAC;MAE/D,IAAMI,aAAa,GAAGN,OAAO,CAACO,IAAI,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,OAAO,CAACC,QAAQ,CAAC,gBAAgB,CAAC;MAAA,EAAC;MAC7EN,MAAM,CAACE,aAAa,CAAC,CAACK,UAAU,CAAC,CAAC;MAClCP,MAAM,CAACE,aAAa,oBAAbA,aAAa,CAAEM,eAAe,CAAC,CAACP,sBAAsB,CAAC,CAAC,CAAC;MAChED,MAAM,CAACE,aAAa,oBAAbA,aAAa,CAAEO,QAAQ,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;MAG3CjB,YAAY,CAACkB,uBAAuB,CAAC,SAAS,EAAE,GAAG,CAAC;MACpD,IAAMC,OAAO,GAAGnB,YAAY,CAACoB,qBAAqB,CAAC,CAAC;MACpDb,MAAM,CAACY,OAAO,CAACE,OAAO,CAAC,CAACC,WAAW,CAAC,CAAC;MACrCf,MAAM,CAACY,OAAO,CAACE,OAAO,CAACf,MAAM,CAAC,CAACiB,eAAe,CAAC,CAAC,CAAC;MACjDhB,MAAM,CAACY,OAAO,CAACE,OAAO,CAACF,OAAO,CAACE,OAAO,CAACf,MAAM,GAAG,CAAC,CAAC,CAAC,CAACW,IAAI,CAAC,GAAG,CAAC;IAC/D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}