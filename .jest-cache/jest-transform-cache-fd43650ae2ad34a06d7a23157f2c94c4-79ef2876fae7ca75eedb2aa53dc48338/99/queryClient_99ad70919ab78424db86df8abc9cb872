ec7e71b2e41af852542d25571ba96198
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryKeys = exports.queryClient = exports.invalidateQueries = exports.handleQueryError = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _reactQuery = require("@tanstack/react-query");
var queryClient = exports.queryClient = new _reactQuery.QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,
      gcTime: 10 * 60 * 1000,
      retry: 3,
      retryDelay: function retryDelay(attemptIndex) {
        return Math.min(1000 * 2 ** attemptIndex, 30000);
      },
      refetchOnWindowFocus: false,
      refetchOnReconnect: true,
      refetchOnMount: true,
      throwOnError: false,
      networkMode: 'online'
    },
    mutations: {
      retry: 1,
      retryDelay: 1000,
      networkMode: 'online',
      throwOnError: false
    }
  }
});
var queryKeys = exports.queryKeys = {
  auth: {
    all: ['auth'],
    currentUser: function currentUser() {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.auth.all), ['currentUser']);
    },
    profile: function profile(userId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.auth.all), ['profile', userId]);
    }
  },
  attendance: {
    all: ['attendance'],
    store: function store(storeId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.attendance.all), ['store', storeId]);
    },
    employee: function employee(employeeId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.attendance.all), ['employee', employeeId]);
    },
    monthly: function monthly(employeeId, year, month) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.attendance.employee(employeeId)), ['monthly', year, month]);
    }
  },
  salary: {
    all: ['salary'],
    employee: function employee(employeeId, year, month) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.salary.all), ['employee', employeeId, year, month]);
    },
    store: function store(storeId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.salary.all), ['store', storeId]);
    }
  },
  store: {
    all: ['store'],
    detail: function detail(storeId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.store.all), ['detail', storeId]);
    },
    employees: function employees(storeId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.store.all), ['employees', storeId]);
    },
    master: function master(userId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.store.all), ['master', userId]);
    }
  },
  info: {
    all: ['info'],
    tips: function tips() {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.info.all), ['tips']);
    },
    policies: function policies() {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.info.all), ['policies']);
    },
    labor: function labor() {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.info.all), ['labor']);
    }
  },
  qna: {
    all: ['qna'],
    questions: function questions() {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.qna.all), ['questions']);
    },
    question: function question(questionId) {
      return [].concat((0, _toConsumableArray2.default)(queryKeys.qna.all), ['question', questionId]);
    }
  }
};
var invalidateQueries = exports.invalidateQueries = {
  auth: function auth() {
    return queryClient.invalidateQueries({
      queryKey: queryKeys.auth.all
    });
  },
  attendance: {
    all: function all() {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.attendance.all
      });
    },
    store: function store(storeId) {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.attendance.store(storeId)
      });
    },
    employee: function employee(employeeId) {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.attendance.employee(employeeId)
      });
    }
  },
  salary: {
    all: function all() {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.salary.all
      });
    },
    employee: function employee(employeeId) {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.salary.all,
        predicate: function predicate(query) {
          return query.queryKey.includes(employeeId);
        }
      });
    }
  },
  store: {
    all: function all() {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.store.all
      });
    },
    detail: function detail(storeId) {
      return queryClient.invalidateQueries({
        queryKey: queryKeys.store.detail(storeId)
      });
    }
  }
};
var handleQueryError = exports.handleQueryError = function handleQueryError(error, context) {
  console.error(`[TanStack Query Error]${context ? ` ${context}:` : ''}`, error);
  if (error && typeof error === 'object' && 'response' in error) {
    var apiError = error;
    switch (apiError.response.status) {
      case 401:
        invalidateQueries.auth();
        break;
      case 403:
        console.warn('[TanStack Query] 권한이 없습니다.');
        break;
      case 500:
        console.error('[TanStack Query] 서버 오류가 발생했습니다.');
        break;
      default:
        console.error('[TanStack Query] API 오류:', apiError.response.status);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,