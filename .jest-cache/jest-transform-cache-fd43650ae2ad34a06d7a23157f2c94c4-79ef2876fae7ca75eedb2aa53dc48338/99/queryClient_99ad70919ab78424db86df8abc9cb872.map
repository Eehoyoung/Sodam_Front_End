{"version":3,"names":["_reactQuery","require","queryClient","exports","QueryClient","defaultOptions","queries","staleTime","gcTime","retry","retryDelay","attemptIndex","Math","min","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","throwOnError","networkMode","mutations","queryKeys","auth","all","currentUser","concat","_toConsumableArray2","default","profile","userId","attendance","store","storeId","employee","employeeId","monthly","year","month","salary","detail","employees","master","info","tips","policies","labor","qna","questions","question","questionId","invalidateQueries","queryKey","predicate","query","includes","handleQueryError","error","context","console","apiError","response","status","warn"],"sources":["queryClient.ts"],"sourcesContent":["import {QueryClient} from '@tanstack/react-query';\r\n\r\n/**\r\n * TanStack Query 클라이언트 설정\r\n * 백엔드 Redis 캐싱과 연계한 최적화된 클라이언트 사이드 데이터 관리\r\n */\r\nexport const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n        queries: {\r\n            // 캐시 전략 설정\r\n            staleTime: 5 * 60 * 1000, // 5분 - 데이터가 신선한 것으로 간주되는 시간\r\n            gcTime: 10 * 60 * 1000, // 10분 - 가비지 컬렉션 시간 (구 cacheTime)\r\n\r\n            // 재시도 설정\r\n            retry: 3, // 실패 시 3번까지 재시도\r\n            retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // 지수 백오프\r\n\r\n            // 네트워크 및 포커스 관련 설정\r\n            refetchOnWindowFocus: false, // 윈도우 포커스 시 자동 재요청 비활성화\r\n            refetchOnReconnect: true, // 네트워크 재연결 시 자동 재요청\r\n            refetchOnMount: true, // 컴포넌트 마운트 시 재요청\r\n\r\n            // 에러 처리\r\n            throwOnError: false, // 에러를 throw하지 않고 상태로 관리\r\n\r\n            // 네트워크 모드 설정\r\n            networkMode: 'online', // 온라인일 때만 쿼리 실행\r\n        },\r\n        mutations: {\r\n            // 뮤테이션 재시도 설정\r\n            retry: 1, // 뮤테이션은 1번만 재시도\r\n            retryDelay: 1000, // 1초 후 재시도\r\n\r\n            // 네트워크 모드 설정\r\n            networkMode: 'online',\r\n\r\n            // 에러 처리\r\n            throwOnError: false,\r\n        },\r\n    },\r\n});\r\n\r\n/**\r\n * 쿼리 키 팩토리\r\n * 일관된 쿼리 키 생성을 위한 헬퍼 함수들\r\n */\r\nexport const queryKeys = {\r\n    // 인증 관련\r\n    auth: {\r\n        all: ['auth'] as const,\r\n        currentUser: () => [...queryKeys.auth.all, 'currentUser'] as const,\r\n        profile: (userId: string) => [...queryKeys.auth.all, 'profile', userId] as const,\r\n    },\r\n\r\n    // 근태 관리 관련\r\n    attendance: {\r\n        all: ['attendance'] as const,\r\n        store: (storeId: number) => [...queryKeys.attendance.all, 'store', storeId] as const,\r\n        employee: (employeeId: number) => [...queryKeys.attendance.all, 'employee', employeeId] as const,\r\n        monthly: (employeeId: number, year: number, month: number) =>\r\n            [...queryKeys.attendance.employee(employeeId), 'monthly', year, month] as const,\r\n    },\r\n\r\n    // 급여 관리 관련\r\n    salary: {\r\n        all: ['salary'] as const,\r\n        employee: (employeeId: number, year: number, month: number) =>\r\n            [...queryKeys.salary.all, 'employee', employeeId, year, month] as const,\r\n        store: (storeId: number) => [...queryKeys.salary.all, 'store', storeId] as const,\r\n    },\r\n\r\n    // 매장 관리 관련\r\n    store: {\r\n        all: ['store'] as const,\r\n        detail: (storeId: number) => [...queryKeys.store.all, 'detail', storeId] as const,\r\n        employees: (storeId: number) => [...queryKeys.store.all, 'employees', storeId] as const,\r\n        master: (userId: string) => [...queryKeys.store.all, 'master', userId] as const,\r\n    },\r\n\r\n    // 정보 서비스 관련\r\n    info: {\r\n        all: ['info'] as const,\r\n        tips: () => [...queryKeys.info.all, 'tips'] as const,\r\n        policies: () => [...queryKeys.info.all, 'policies'] as const,\r\n        labor: () => [...queryKeys.info.all, 'labor'] as const,\r\n    },\r\n\r\n    // Q&A 관련\r\n    qna: {\r\n        all: ['qna'] as const,\r\n        questions: () => [...queryKeys.qna.all, 'questions'] as const,\r\n        question: (questionId: number) => [...queryKeys.qna.all, 'question', questionId] as const,\r\n    },\r\n} as const;\r\n\r\n/**\r\n * 캐시 무효화 헬퍼 함수들\r\n */\r\nexport const invalidateQueries = {\r\n    // 인증 관련 캐시 무효화\r\n    auth: () => queryClient.invalidateQueries({queryKey: queryKeys.auth.all}),\r\n\r\n    // 근태 관련 캐시 무효화\r\n    attendance: {\r\n        all: () => queryClient.invalidateQueries({queryKey: queryKeys.attendance.all}),\r\n        store: (storeId: number) => queryClient.invalidateQueries({queryKey: queryKeys.attendance.store(storeId)}),\r\n        employee: (employeeId: number) => queryClient.invalidateQueries({queryKey: queryKeys.attendance.employee(employeeId)}),\r\n    },\r\n\r\n    // 급여 관련 캐시 무효화\r\n    salary: {\r\n        all: () => queryClient.invalidateQueries({queryKey: queryKeys.salary.all}),\r\n        employee: (employeeId: number) => queryClient.invalidateQueries({\r\n            queryKey: queryKeys.salary.all,\r\n            predicate: (query) => query.queryKey.includes(employeeId)\r\n        }),\r\n    },\r\n\r\n    // 매장 관련 캐시 무효화\r\n    store: {\r\n        all: () => queryClient.invalidateQueries({queryKey: queryKeys.store.all}),\r\n        detail: (storeId: number) => queryClient.invalidateQueries({queryKey: queryKeys.store.detail(storeId)}),\r\n    },\r\n};\r\n\r\n/**\r\n * 에러 처리 헬퍼\r\n */\r\nexport const handleQueryError = (error: unknown, context?: string) => {\r\n    console.error(`[TanStack Query Error]${context ? ` ${context}:` : ''}`, error);\r\n\r\n    // 에러 타입에 따른 처리\r\n    if (error && typeof error === 'object' && 'response' in error) {\r\n        const apiError = error as { response: { status: number; data?: any } };\r\n\r\n        switch (apiError.response.status) {\r\n            case 401:\r\n                // 인증 오류 - 로그아웃 처리\r\n                invalidateQueries.auth();\r\n                break;\r\n            case 403:\r\n                // 권한 오류\r\n                console.warn('[TanStack Query] 권한이 없습니다.');\r\n                break;\r\n            case 500:\r\n                // 서버 오류\r\n                console.error('[TanStack Query] 서버 오류가 발생했습니다.');\r\n                break;\r\n            default:\r\n                console.error('[TanStack Query] API 오류:', apiError.response.status);\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]}