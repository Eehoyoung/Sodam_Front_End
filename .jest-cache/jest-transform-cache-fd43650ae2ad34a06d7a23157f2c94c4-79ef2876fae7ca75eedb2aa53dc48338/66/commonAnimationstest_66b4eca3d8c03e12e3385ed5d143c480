e68d4047d56cc8cd542674446b18ec9a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _animationTestUtils = require("./animationTestUtils");
var _commonAnimations = require("../commonAnimations");
var _constants = require("../constants");
describe('Common Animation Functions', function () {
  var testSetup;
  beforeEach(function () {
    testSetup = _animationTestUtils.TestSetup.setupAnimationTesting();
  });
  afterEach(function () {
    testSetup.restore();
  });
  describe('Fade Animations', function () {
    test('fadeIn should animate opacity from 0 to 1', (0, _asyncToGenerator2.default)(function* () {
      var opacityValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var result = yield _animationTestUtils.AnimationTestScenarios.testFadeIn(opacityValue, function () {
        opacityValue.value = (0, _commonAnimations.fadeIn)();
      }, {
        expectedDuration: _constants.ANIMATION_DURATIONS.NORMAL,
        toleranceMs: 50
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
    test('fadeOut should animate opacity from 1 to 0', (0, _asyncToGenerator2.default)(function* () {
      var opacityValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(1);
      var result = yield _animationTestUtils.AnimationTestScenarios.testFadeOut(opacityValue, function () {
        opacityValue.value = (0, _commonAnimations.fadeOut)();
      }, {
        expectedDuration: _constants.ANIMATION_DURATIONS.NORMAL,
        toleranceMs: 50
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
    test('fadeIn with custom duration should respect timing', (0, _asyncToGenerator2.default)(function* () {
      var customDuration = 500;
      var opacityValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var result = yield _animationTestUtils.AnimationTestHelpers.executeAnimationTest('fadeIn_custom_duration', function () {
        opacityValue.value = (0, _commonAnimations.fadeIn)(customDuration);
      }, {
        expectedDuration: customDuration,
        toleranceMs: 50
      });
      expect(result.success).toBe(true);
      expect(Math.abs(result.actualDuration - customDuration)).toBeLessThanOrEqual(50);
    }));
  });
  describe('Scale Animations', function () {
    test('scaleIn should animate scale from 0 to 1', (0, _asyncToGenerator2.default)(function* () {
      var scaleValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var result = yield _animationTestUtils.AnimationTestScenarios.testScaleAnimation(scaleValue, _constants.ANIMATION_VALUES.SCALE.NORMAL, function () {
        scaleValue.value = (0, _commonAnimations.scaleIn)();
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
    test('scaleOut should animate scale from 1 to 0', (0, _asyncToGenerator2.default)(function* () {
      var scaleValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(1);
      var result = yield _animationTestUtils.AnimationTestScenarios.testScaleAnimation(scaleValue, _constants.ANIMATION_VALUES.SCALE.HIDDEN, function () {
        scaleValue.value = (0, _commonAnimations.scaleOut)();
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
  });
  describe('Slide Animations', function () {
    test('slideUp should animate translateY to negative value', (0, _asyncToGenerator2.default)(function* () {
      var translateValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var slideDistance = 50;
      var result = yield _animationTestUtils.AnimationTestScenarios.testSlideAnimation(translateValue, -slideDistance, function () {
        translateValue.value = (0, _commonAnimations.slideUp)(slideDistance);
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
    test('slideDown should animate translateY to positive value', (0, _asyncToGenerator2.default)(function* () {
      var translateValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var slideDistance = 50;
      var result = yield _animationTestUtils.AnimationTestScenarios.testSlideAnimation(translateValue, slideDistance, function () {
        translateValue.value = (0, _commonAnimations.slideDown)(slideDistance);
      });
      expect(result.success).toBe(true);
      expect(result.error).toBeUndefined();
    }));
  });
  describe('Complex Animations', function () {
    test('pulse animation should repeat correctly', (0, _asyncToGenerator2.default)(function* () {
      var scaleValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(1);
      var result = yield _animationTestUtils.AnimationTestHelpers.executeAnimationTest('pulse_animation', function () {
        scaleValue.value = (0, _commonAnimations.pulse)(1.2, 1000, 2);
      }, {
        expectedDuration: 2000,
        toleranceMs: 100
      });
      expect(result.success).toBe(true);
    }));
    test('shake animation should oscillate correctly', (0, _asyncToGenerator2.default)(function* () {
      var translateValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
      var result = yield _animationTestUtils.AnimationTestHelpers.executeAnimationTest('shake_animation', function () {
        translateValue.value = (0, _commonAnimations.shake)(10, 500, 3);
      }, {
        expectedDuration: 500,
        toleranceMs: 100
      });
      expect(result.success).toBe(true);
    }));
  });
  describe('Animation Validation', function () {
    test('should validate opacity values correctly', function () {
      var opacityValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(1);
      var isValid = _animationTestUtils.AnimationValidators.validateOpacityAnimation(opacityValue, _constants.ANIMATION_VALUES.OPACITY.VISIBLE, 0.01);
      expect(isValid).toBe(true);
    });
    test('should validate scale values correctly', function () {
      var scaleValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(1);
      var isValid = _animationTestUtils.AnimationValidators.validateScaleAnimation(scaleValue, _constants.ANIMATION_VALUES.SCALE.NORMAL, 0.01);
      expect(isValid).toBe(true);
    });
    test('should validate translation values correctly', function () {
      var translateValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(-50);
      var isValid = _animationTestUtils.AnimationValidators.validateTranslationAnimation(translateValue, -50, 1);
      expect(isValid).toBe(true);
    });
    test('should validate animation duration correctly', function () {
      var isValid = _animationTestUtils.AnimationValidators.validateAnimationDuration(305, 300, 10);
      expect(isValid).toBe(true);
    });
    test('should validate frame rate correctly', function () {
      var isValid = _animationTestUtils.AnimationValidators.validateFrameRate(58, 60, 0.1);
      expect(isValid).toBe(true);
    });
  });
  describe('Performance Benchmarking', function () {
    test('should benchmark animation performance', (0, _asyncToGenerator2.default)(function* () {
      var benchmark = yield _animationTestUtils.PerformanceBenchmark.benchmarkAnimation('fadeIn_benchmark', function () {
        var opacityValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
        opacityValue.value = (0, _commonAnimations.fadeIn)();
      }, 3, {
        expectedDuration: _constants.ANIMATION_DURATIONS.NORMAL
      });
      expect(benchmark.averageDuration).toBeGreaterThan(0);
      expect(benchmark.minDuration).toBeGreaterThan(0);
      expect(benchmark.maxDuration).toBeGreaterThan(0);
      expect(benchmark.successRate).toBeGreaterThan(0);
    }));
    test('should compare two animation implementations', (0, _asyncToGenerator2.default)(function* () {
      var animation1 = function animation1() {
        var value = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
        value.value = (0, _commonAnimations.fadeIn)(200);
      };
      var animation2 = function animation2() {
        var value = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(0);
        value.value = (0, _commonAnimations.fadeIn)(400);
      };
      var comparison = yield _animationTestUtils.PerformanceBenchmark.compareAnimations('fadeIn_comparison', animation1, animation2, 2, {
        expectedDuration: 300
      });
      expect(comparison.winner).toBeDefined();
      expect(comparison.improvement).toBeGreaterThanOrEqual(0);
    }));
  });
  describe('Test Utilities', function () {
    test('should create mock SharedValue correctly', function () {
      var mockValue = _animationTestUtils.AnimationTestHelpers.createMockSharedValue(42);
      expect(mockValue.value).toBe(42);
      expect(mockValue.addListener).toBeDefined();
      expect(mockValue.removeListener).toBeDefined();
      expect(mockValue.modify).toBeDefined();
    });
    test('should wait for animation completion', (0, _asyncToGenerator2.default)(function* () {
      var startTime = Date.now();
      yield _animationTestUtils.AnimationTestHelpers.waitForAnimation(100, 50);
      var endTime = Date.now();
      var duration = endTime - startTime;
      expect(duration).toBeGreaterThanOrEqual(150);
    }));
  });
  describe('Mock Timers Integration', function () {
    test('should work with mock timers', function () {
      var mockTimers = _animationTestUtils.TestSetup.setupMockTimers();
      var completed = false;
      setTimeout(function () {
        completed = true;
      }, 1000);
      expect(completed).toBe(false);
      mockTimers.advanceTime(1000);
      expect(completed).toBe(true);
      mockTimers.restore();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,