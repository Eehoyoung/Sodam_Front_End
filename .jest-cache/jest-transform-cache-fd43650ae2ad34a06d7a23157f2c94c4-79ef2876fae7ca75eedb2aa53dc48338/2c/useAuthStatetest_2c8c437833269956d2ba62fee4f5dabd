967dd8a3b5e9a102cbc4fdcffce316be
"use strict";

var _reactNative = require("@testing-library/react-native");
var _useAuthState = require("../hooks/useAuthState");
var mockUser = {
  id: '1',
  email: 'test@example.com',
  name: 'Test User'
};
describe('useAuthState', function () {
  test('should initialize with default state', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook.result;
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.loading).toBe(true);
  });
  test('should provide all required methods', function () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook2.result;
    expect(typeof result.current.setAuthState).toBe('function');
    expect(typeof result.current.setUser).toBe('function');
    expect(typeof result.current.setLoading).toBe('function');
    expect(typeof result.current.setAuthenticated).toBe('function');
    expect(typeof result.current.resetAuth).toBe('function');
  });
  test('should update loading state', function () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook3.result;
    (0, _reactNative.act)(function () {
      result.current.setLoading(false);
    });
    expect(result.current.loading).toBe(false);
  });
  test('should set user and update authentication state', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook4.result;
    (0, _reactNative.act)(function () {
      result.current.setUser(mockUser);
    });
    expect(result.current.user).toEqual(mockUser);
    expect(result.current.isAuthenticated).toBe(true);
    expect(result.current.loading).toBe(false);
  });
  test('should handle null user correctly', function () {
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook5.result;
    (0, _reactNative.act)(function () {
      result.current.setUser(mockUser);
    });
    (0, _reactNative.act)(function () {
      result.current.setUser(null);
    });
    expect(result.current.user).toBe(null);
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.loading).toBe(false);
  });
  test('should update authentication state directly', function () {
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook6.result;
    (0, _reactNative.act)(function () {
      result.current.setAuthenticated(true);
    });
    expect(result.current.isAuthenticated).toBe(true);
  });
  test('should reset authentication state', function () {
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.setUser(mockUser);
    });
    (0, _reactNative.act)(function () {
      result.current.resetAuth();
    });
    expect(result.current.isAuthenticated).toBe(false);
    expect(result.current.user).toBe(null);
    expect(result.current.loading).toBe(false);
  });
  test('should update partial state with setAuthState', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthState.useAuthState)();
      }),
      result = _renderHook8.result;
    (0, _reactNative.act)(function () {
      result.current.setAuthState({
        loading: false,
        isAuthenticated: true
      });
    });
    expect(result.current.loading).toBe(false);
    expect(result.current.isAuthenticated).toBe(true);
    expect(result.current.user).toBe(null);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,