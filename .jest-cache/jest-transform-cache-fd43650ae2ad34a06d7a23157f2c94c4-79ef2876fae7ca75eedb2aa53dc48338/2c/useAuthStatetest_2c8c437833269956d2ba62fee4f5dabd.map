{"version":3,"names":["_reactNative","require","_useAuthState","mockUser","id","email","name","describe","test","_renderHook","renderHook","useAuthState","result","expect","current","isAuthenticated","toBe","user","loading","_renderHook2","setAuthState","setUser","setLoading","setAuthenticated","resetAuth","_renderHook3","act","_renderHook4","toEqual","_renderHook5","_renderHook6","_renderHook7","_renderHook8"],"sources":["useAuthState.test.ts"],"sourcesContent":["import {act, renderHook} from '@testing-library/react-native';\r\nimport {useAuthState} from '../hooks/useAuthState';\r\n\r\n// Mock User type\r\nconst mockUser = {\r\n    id: '1',\r\n    email: 'test@example.com',\r\n    name: 'Test User',\r\n};\r\n\r\ndescribe('useAuthState', () => {\r\n    test('should initialize with default state', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        expect(result.current.isAuthenticated).toBe(false);\r\n        expect(result.current.user).toBe(null);\r\n        expect(result.current.loading).toBe(true);\r\n    });\r\n\r\n    test('should provide all required methods', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        expect(typeof result.current.setAuthState).toBe('function');\r\n        expect(typeof result.current.setUser).toBe('function');\r\n        expect(typeof result.current.setLoading).toBe('function');\r\n        expect(typeof result.current.setAuthenticated).toBe('function');\r\n        expect(typeof result.current.resetAuth).toBe('function');\r\n    });\r\n\r\n    test('should update loading state', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        act(() => {\r\n            result.current.setLoading(false);\r\n        });\r\n\r\n        expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    test('should set user and update authentication state', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        act(() => {\r\n            result.current.setUser(mockUser);\r\n        });\r\n\r\n        expect(result.current.user).toEqual(mockUser);\r\n        expect(result.current.isAuthenticated).toBe(true);\r\n        expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    test('should handle null user correctly', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        // First set a user\r\n        act(() => {\r\n            result.current.setUser(mockUser);\r\n        });\r\n\r\n        // Then set to null\r\n        act(() => {\r\n            result.current.setUser(null);\r\n        });\r\n\r\n        expect(result.current.user).toBe(null);\r\n        expect(result.current.isAuthenticated).toBe(false);\r\n        expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    test('should update authentication state directly', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        act(() => {\r\n            result.current.setAuthenticated(true);\r\n        });\r\n\r\n        expect(result.current.isAuthenticated).toBe(true);\r\n    });\r\n\r\n    test('should reset authentication state', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        // First set authenticated state\r\n        act(() => {\r\n            result.current.setUser(mockUser);\r\n        });\r\n\r\n        // Then reset\r\n        act(() => {\r\n            result.current.resetAuth();\r\n        });\r\n\r\n        expect(result.current.isAuthenticated).toBe(false);\r\n        expect(result.current.user).toBe(null);\r\n        expect(result.current.loading).toBe(false);\r\n    });\r\n\r\n    test('should update partial state with setAuthState', () => {\r\n        const {result} = renderHook(() => useAuthState());\r\n\r\n        act(() => {\r\n            result.current.setAuthState({\r\n                loading: false,\r\n                isAuthenticated: true\r\n            });\r\n        });\r\n\r\n        expect(result.current.loading).toBe(false);\r\n        expect(result.current.isAuthenticated).toBe(true);\r\n        expect(result.current.user).toBe(null); // Should remain unchanged\r\n    });\r\n});\r\n"],"mappings":"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","ignoreList":[]}