78bd86ec119738a7eff50352e1c37193
"use strict";

_getJestObj().mock('@react-navigation/native', function () {
  return {
    NavigationContainer: function NavigationContainer(_ref) {
      var children = _ref.children;
      return children;
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StatusBar: 'StatusBar',
    useColorScheme: jest.fn(function () {
      return 'light';
    }),
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Image: 'Image',
    ScrollView: 'ScrollView',
    Animated: {
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          addListener: jest.fn(),
          removeListener: jest.fn(),
          removeAllListeners: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              setValue: jest.fn(),
              addListener: jest.fn(),
              removeListener: jest.fn()
            };
          })
        };
      }),
      View: 'Animated.View',
      ScrollView: 'Animated.ScrollView',
      Text: 'Animated.Text',
      timing: jest.fn(function () {
        return {
          start: jest.fn(),
          stop: jest.fn(),
          reset: jest.fn()
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(),
          stop: jest.fn(),
          reset: jest.fn()
        };
      }),
      decay: jest.fn(function () {
        return {
          start: jest.fn(),
          stop: jest.fn(),
          reset: jest.fn()
        };
      }),
      sequence: jest.fn(),
      parallel: jest.fn(),
      stagger: jest.fn(),
      loop: jest.fn(),
      delay: jest.fn(),
      event: jest.fn(function () {
        return jest.fn();
      }),
      createAnimatedComponent: jest.fn(function () {
        return 'AnimatedComponent';
      }),
      add: jest.fn(),
      subtract: jest.fn(),
      multiply: jest.fn(),
      divide: jest.fn(),
      modulo: jest.fn(),
      diffClamp: jest.fn()
    },
    InteractionManager: {
      runAfterInteractions: jest.fn(function (cb) {
        if (typeof cb === 'function') {
          cb();
        }
        return {
          cancel: jest.fn()
        };
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 812
        };
      })
    },
    Platform: {
      OS: 'ios',
      select: jest.fn(function (obj) {
        return obj.ios;
      })
    },
    LogBox: {
      ignoreLogs: jest.fn(),
      ignoreAllLogs: jest.fn()
    }
  };
});
_getJestObj().mock('react-native-screens', function () {
  return {
    enableScreens: jest.fn()
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref2) {
      var children = _ref2.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref3) {
      var children = _ref3.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
    }
  };
});
_getJestObj().mock('@expo/vector-icons', function () {
  return {
    Ionicons: 'Ionicons',
    FontAwesome: 'FontAwesome',
    FontAwesome5: 'FontAwesome5',
    MaterialIcons: 'MaterialIcons',
    AntDesign: 'AntDesign'
  };
});
_getJestObj().mock('react-native-svg', function () {
  return {
    Svg: 'Svg',
    Circle: 'Circle',
    Ellipse: 'Ellipse',
    G: 'G',
    Text: 'Text',
    TSpan: 'TSpan',
    TextPath: 'TextPath',
    Path: 'Path',
    Polygon: 'Polygon',
    Polyline: 'Polyline',
    Line: 'Line',
    Rect: 'Rect',
    Use: 'Use',
    Image: 'Image',
    Symbol: 'Symbol',
    Defs: 'Defs',
    LinearGradient: 'LinearGradient',
    RadialGradient: 'RadialGradient',
    Stop: 'Stop',
    ClipPath: 'ClipPath',
    Pattern: 'Pattern',
    Mask: 'Mask'
  };
});
_getJestObj().mock('react-native-chart-kit', function () {
  return {
    LineChart: 'LineChart',
    BarChart: 'BarChart',
    PieChart: 'PieChart',
    ProgressChart: 'ProgressChart',
    ContributionGraph: 'ContributionGraph',
    StackedBarChart: 'StackedBarChart'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
try {
  _getJestObj().mock('@react-native-async-storage/async-storage', function () {
    return {
      getItem: jest.fn(function () {
        return Promise.resolve(null);
      }),
      setItem: jest.fn(function () {
        return Promise.resolve();
      }),
      removeItem: jest.fn(function () {
        return Promise.resolve();
      })
    };
  });
} catch (e) {}
try {
  _getJestObj().mock('react-native-reanimated', function () {
    return require('react-native-reanimated/mock');
  });
} catch (e) {
  _getJestObj().mock('react-native-reanimated', function () {
    return {
      Easing: {
        linear: jest.fn(),
        ease: jest.fn()
      },
      useSharedValue: jest.fn(function () {
        return {
          value: 0
        };
      }),
      useAnimatedStyle: jest.fn(function () {
        return {};
      }),
      withTiming: jest.fn(function (v) {
        return v;
      }),
      withSpring: jest.fn(function (v) {
        return v;
      }),
      withDelay: jest.fn(function (_, v) {
        return v;
      }),
      runOnJS: function runOnJS(fn) {
        return fn;
      },
      runOnUI: function runOnUI(fn) {
        return fn;
      },
      createAnimatedComponent: function createAnimatedComponent(c) {
        return c;
      }
    };
  });
}
try {
  _getJestObj().mock('@testing-library/react-native', function () {
    var render = jest.fn(function () {
      return {
        getByText: jest.fn(),
        getByTestId: jest.fn(),
        queryByText: jest.fn(),
        update: jest.fn(),
        unmount: jest.fn()
      };
    });
    var renderHook = jest.fn(function (callback) {
      var result = {
        current: undefined
      };
      try {
        var r = callback();
        result.current = r && 'result' in r ? r.result : r;
      } catch (e) {
        result.current = undefined;
      }
      return {
        result: result,
        rerender: jest.fn(),
        unmount: jest.fn()
      };
    });
    var fireEvent = {
      press: jest.fn(),
      changeText: jest.fn()
    };
    var waitFor = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* (cb) {
        if (cb) {
          yield cb();
        }
      });
      return function waitFor(_x) {
        return _ref4.apply(this, arguments);
      };
    }();
    var act = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* (cb) {
        return cb ? yield cb() : undefined;
      });
      return function act(_x2) {
        return _ref5.apply(this, arguments);
      };
    }();
    return {
      render: render,
      renderHook: renderHook,
      fireEvent: fireEvent,
      waitFor: waitFor,
      act: act
    };
  });
} catch (e) {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,