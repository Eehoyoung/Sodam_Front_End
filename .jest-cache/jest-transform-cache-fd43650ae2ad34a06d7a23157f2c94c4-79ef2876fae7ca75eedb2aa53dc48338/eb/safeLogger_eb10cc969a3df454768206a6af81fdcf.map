{"version":3,"names":["SafeLogger","_createClass2","default","_this","_options$enableConsol","_options$enableLogBox","_options$maxLogBoxErr","options","arguments","length","undefined","_classCallCheck2","logBoxErrorCount","error","enableConsole","_len","args","Array","_key","errorMessage","join","isLogBoxRelatedError","maxLogBoxErrors","originalConsoleWarn","enableLogBox","apply","concat","originalConsoleError","warn","log","originalConsoleLog","errorBoundaryLog","errorInfo","message","asyncStorageInfo","_len2","_key2","isAsyncStorageNullReturn","asyncStorageError","_len3","_key3","isAsyncStorageUnavailable","reset","getStatus","nullReturnKeywords","asyncStorageKeywords","hasAsyncStorageKeyword","some","keyword","toLowerCase","includes","hasNullKeyword","unavailableKeywords","logBoxKeywords","console","safeLogger","exports","__DEV__","_default"],"sources":["safeLogger.ts"],"sourcesContent":["/**\r\n * Safe Logger Utility\r\n * LogBox 무한 루프를 방지하기 위한 안전한 로깅 유틸리티\r\n */\r\n\r\ninterface SafeLoggerOptions {\r\n    enableConsole?: boolean;\r\n    enableLogBox?: boolean;\r\n    maxLogBoxErrors?: number;\r\n}\r\n\r\nclass SafeLogger {\r\n    private logBoxErrorCount = 0;\r\n    private maxLogBoxErrors: number;\r\n    private enableConsole: boolean;\r\n    private enableLogBox: boolean;\r\n    private originalConsoleError: typeof console.error;\r\n    private originalConsoleWarn: typeof console.warn;\r\n    private originalConsoleLog: typeof console.log;\r\n\r\n    constructor(options: SafeLoggerOptions = {}) {\r\n        this.enableConsole = options.enableConsole ?? true;\r\n        this.enableLogBox = options.enableLogBox ?? true;\r\n        this.maxLogBoxErrors = options.maxLogBoxErrors ?? 3;\r\n\r\n        // 원본 console 메서드 저장\r\n        this.originalConsoleError = console.error;\r\n        this.originalConsoleWarn = console.warn;\r\n        this.originalConsoleLog = console.log;\r\n    }\r\n\r\n    /**\r\n     * 안전한 에러 로깅\r\n     * LogBox 관련 에러는 무시하고, 일반 에러만 로깅\r\n     */\r\n    error = (...args: any[]) => {\r\n        if (!this.enableConsole) return;\r\n\r\n        const errorMessage = args.join(' ');\r\n\r\n        // LogBox 관련 에러인지 확인\r\n        if (this.isLogBoxRelatedError(errorMessage)) {\r\n            this.logBoxErrorCount++;\r\n\r\n            // LogBox 에러가 임계값을 초과하면 LogBox 비활성화\r\n            if (this.logBoxErrorCount >= this.maxLogBoxErrors) {\r\n                this.originalConsoleWarn('[SafeLogger] LogBox 무한 루프 감지 - 추가 LogBox 에러 무시');\r\n                this.enableLogBox = false;\r\n                return;\r\n            }\r\n\r\n            // LogBox 에러는 warn으로 처리\r\n            this.originalConsoleWarn('[SafeLogger] LogBox 에러 감지:', ...args);\r\n            return;\r\n        }\r\n\r\n        // 일반 에러는 정상 처리\r\n        this.originalConsoleError(...args);\r\n    };\r\n\r\n    /**\r\n     * 안전한 경고 로깅\r\n     */\r\n    warn = (...args: any[]) => {\r\n        if (!this.enableConsole) return;\r\n        this.originalConsoleWarn(...args);\r\n    };\r\n\r\n    /**\r\n     * 안전한 일반 로깅\r\n     */\r\n    log = (...args: any[]) => {\r\n        if (!this.enableConsole) return;\r\n        this.originalConsoleLog(...args);\r\n    };\r\n\r\n    /**\r\n     * ErrorBoundary 전용 안전한 에러 로깅\r\n     */\r\n    errorBoundaryLog = (error: Error, errorInfo?: any) => {\r\n        if (!this.enableConsole) return;\r\n\r\n        // ErrorBoundary 에러는 항상 로깅하되, LogBox 트리거를 피함\r\n        const errorMessage = `[ErrorBoundary] ${error.message}`;\r\n\r\n        if (this.isLogBoxRelatedError(error.message)) {\r\n            // LogBox 관련 에러는 단순 텍스트로만 로깅\r\n            this.originalConsoleWarn('[ErrorBoundary] LogBox 관련 에러 감지:', errorMessage);\r\n            return;\r\n        }\r\n\r\n        // 일반 에러는 정상 로깅\r\n        this.originalConsoleError('[ErrorBoundary] 에러 발생:', error);\r\n        if (errorInfo) {\r\n            this.originalConsoleError('[ErrorBoundary] 에러 정보:', errorInfo);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * AsyncStorage 관련 정보성 로깅\r\n     * null 반환은 정상 동작이므로 INFO 레벨로 처리\r\n     */\r\n    asyncStorageInfo = (...args: any[]) => {\r\n        if (!this.enableConsole) return;\r\n\r\n        const message = args.join(' ');\r\n\r\n        // AsyncStorage null 반환 관련 메시지는 INFO 레벨로 처리\r\n        if (this.isAsyncStorageNullReturn(message)) {\r\n            this.originalConsoleLog('[SafeLogger] AsyncStorage INFO:', ...args);\r\n            return;\r\n        }\r\n\r\n        // 일반 정보는 log로 처리\r\n        this.originalConsoleLog(...args);\r\n    };\r\n\r\n    /**\r\n     * AsyncStorage 관련 에러 로깅\r\n     * 실제 에러만 error 레벨로 처리\r\n     */\r\n    asyncStorageError = (...args: any[]) => {\r\n        if (!this.enableConsole) return;\r\n\r\n        const message = args.join(' ');\r\n\r\n        // AsyncStorage null 반환은 에러가 아님\r\n        if (this.isAsyncStorageNullReturn(message)) {\r\n            this.originalConsoleLog('[SafeLogger] AsyncStorage null return (normal):', ...args);\r\n            return;\r\n        }\r\n\r\n        // AsyncStorage 가용성 문제만 실제 에러로 처리\r\n        if (this.isAsyncStorageUnavailable(message)) {\r\n            this.originalConsoleError('[SafeLogger] AsyncStorage unavailable:', ...args);\r\n            return;\r\n        }\r\n\r\n        // 기타 AsyncStorage 관련 문제는 warn으로 처리\r\n        this.originalConsoleWarn('[SafeLogger] AsyncStorage warning:', ...args);\r\n    };\r\n\r\n    /**\r\n     * 로거 상태 리셋\r\n     */\r\n    reset = () => {\r\n        this.logBoxErrorCount = 0;\r\n        this.enableLogBox = true;\r\n    };\r\n\r\n    /**\r\n     * 현재 상태 정보\r\n     */\r\n    getStatus = () => ({\r\n        logBoxErrorCount: this.logBoxErrorCount,\r\n        enableConsole: this.enableConsole,\r\n        enableLogBox: this.enableLogBox,\r\n        maxLogBoxErrors: this.maxLogBoxErrors\r\n    });\r\n\r\n    /**\r\n     * AsyncStorage null 반환 관련 메시지인지 확인\r\n     */\r\n    private isAsyncStorageNullReturn = (message: string): boolean => {\r\n        const nullReturnKeywords = [\r\n            'null',\r\n            'first launch',\r\n            'no token',\r\n            'not found',\r\n            'empty',\r\n            'undefined'\r\n        ];\r\n\r\n        const asyncStorageKeywords = [\r\n            'AsyncStorage',\r\n            'getItem',\r\n            'hasLaunched',\r\n            'userToken',\r\n            'token'\r\n        ];\r\n\r\n        const hasAsyncStorageKeyword = asyncStorageKeywords.some(keyword =>\r\n            message.toLowerCase().includes(keyword.toLowerCase())\r\n        );\r\n\r\n        const hasNullKeyword = nullReturnKeywords.some(keyword =>\r\n            message.toLowerCase().includes(keyword.toLowerCase())\r\n        );\r\n\r\n        return hasAsyncStorageKeyword && hasNullKeyword;\r\n    };\r\n\r\n    /**\r\n     * AsyncStorage 가용성 문제인지 확인\r\n     */\r\n    private isAsyncStorageUnavailable = (message: string): boolean => {\r\n        const unavailableKeywords = [\r\n            'AsyncStorage is null',\r\n            'NativeModule: AsyncStorage is null',\r\n            'AsyncStorage not available',\r\n            'AsyncStorage undefined',\r\n            'module not found'\r\n        ];\r\n\r\n        return unavailableKeywords.some(keyword =>\r\n            message.toLowerCase().includes(keyword.toLowerCase())\r\n        );\r\n    };\r\n\r\n    /**\r\n     * LogBox 관련 에러인지 확인\r\n     */\r\n    private isLogBoxRelatedError = (message: string): boolean => {\r\n        const logBoxKeywords = [\r\n            'LogBox',\r\n            'DevTools',\r\n            'render log messages',\r\n            'LogBoxStateSubscription',\r\n            'Simulated error coming from DevTools'\r\n        ];\r\n\r\n        return logBoxKeywords.some(keyword =>\r\n            message.toLowerCase().includes(keyword.toLowerCase())\r\n        );\r\n    };\r\n}\r\n\r\n// 전역 SafeLogger 인스턴스\r\nexport const safeLogger = new SafeLogger({\r\n    enableConsole: __DEV__,\r\n    enableLogBox: __DEV__,\r\n    maxLogBoxErrors: 3\r\n});\r\n\r\nexport default safeLogger;\r\n"],"mappings":"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","ignoreList":[]}