bc022d0644c3c2978d56a446a7edff42
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeLogger = exports.default = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var SafeLogger = (0, _createClass2.default)(function SafeLogger() {
  var _this = this,
    _options$enableConsol,
    _options$enableLogBox,
    _options$maxLogBoxErr;
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  (0, _classCallCheck2.default)(this, SafeLogger);
  this.logBoxErrorCount = 0;
  this.error = function () {
    if (!_this.enableConsole) return;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var errorMessage = args.join(' ');
    if (_this.isLogBoxRelatedError(errorMessage)) {
      _this.logBoxErrorCount++;
      if (_this.logBoxErrorCount >= _this.maxLogBoxErrors) {
        _this.originalConsoleWarn('[SafeLogger] LogBox 무한 루프 감지 - 추가 LogBox 에러 무시');
        _this.enableLogBox = false;
        return;
      }
      _this.originalConsoleWarn.apply(_this, ['[SafeLogger] LogBox 에러 감지:'].concat(args));
      return;
    }
    _this.originalConsoleError.apply(_this, args);
  };
  this.warn = function () {
    if (!_this.enableConsole) return;
    _this.originalConsoleWarn.apply(_this, arguments);
  };
  this.log = function () {
    if (!_this.enableConsole) return;
    _this.originalConsoleLog.apply(_this, arguments);
  };
  this.errorBoundaryLog = function (error, errorInfo) {
    if (!_this.enableConsole) return;
    var errorMessage = `[ErrorBoundary] ${error.message}`;
    if (_this.isLogBoxRelatedError(error.message)) {
      _this.originalConsoleWarn('[ErrorBoundary] LogBox 관련 에러 감지:', errorMessage);
      return;
    }
    _this.originalConsoleError('[ErrorBoundary] 에러 발생:', error);
    if (errorInfo) {
      _this.originalConsoleError('[ErrorBoundary] 에러 정보:', errorInfo);
    }
  };
  this.asyncStorageInfo = function () {
    if (!_this.enableConsole) return;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    var message = args.join(' ');
    if (_this.isAsyncStorageNullReturn(message)) {
      _this.originalConsoleLog.apply(_this, ['[SafeLogger] AsyncStorage INFO:'].concat(args));
      return;
    }
    _this.originalConsoleLog.apply(_this, args);
  };
  this.asyncStorageError = function () {
    if (!_this.enableConsole) return;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    var message = args.join(' ');
    if (_this.isAsyncStorageNullReturn(message)) {
      _this.originalConsoleLog.apply(_this, ['[SafeLogger] AsyncStorage null return (normal):'].concat(args));
      return;
    }
    if (_this.isAsyncStorageUnavailable(message)) {
      _this.originalConsoleError.apply(_this, ['[SafeLogger] AsyncStorage unavailable:'].concat(args));
      return;
    }
    _this.originalConsoleWarn.apply(_this, ['[SafeLogger] AsyncStorage warning:'].concat(args));
  };
  this.reset = function () {
    _this.logBoxErrorCount = 0;
    _this.enableLogBox = true;
  };
  this.getStatus = function () {
    return {
      logBoxErrorCount: _this.logBoxErrorCount,
      enableConsole: _this.enableConsole,
      enableLogBox: _this.enableLogBox,
      maxLogBoxErrors: _this.maxLogBoxErrors
    };
  };
  this.isAsyncStorageNullReturn = function (message) {
    var nullReturnKeywords = ['null', 'first launch', 'no token', 'not found', 'empty', 'undefined'];
    var asyncStorageKeywords = ['AsyncStorage', 'getItem', 'hasLaunched', 'userToken', 'token'];
    var hasAsyncStorageKeyword = asyncStorageKeywords.some(function (keyword) {
      return message.toLowerCase().includes(keyword.toLowerCase());
    });
    var hasNullKeyword = nullReturnKeywords.some(function (keyword) {
      return message.toLowerCase().includes(keyword.toLowerCase());
    });
    return hasAsyncStorageKeyword && hasNullKeyword;
  };
  this.isAsyncStorageUnavailable = function (message) {
    var unavailableKeywords = ['AsyncStorage is null', 'NativeModule: AsyncStorage is null', 'AsyncStorage not available', 'AsyncStorage undefined', 'module not found'];
    return unavailableKeywords.some(function (keyword) {
      return message.toLowerCase().includes(keyword.toLowerCase());
    });
  };
  this.isLogBoxRelatedError = function (message) {
    var logBoxKeywords = ['LogBox', 'DevTools', 'render log messages', 'LogBoxStateSubscription', 'Simulated error coming from DevTools'];
    return logBoxKeywords.some(function (keyword) {
      return message.toLowerCase().includes(keyword.toLowerCase());
    });
  };
  this.enableConsole = (_options$enableConsol = options.enableConsole) != null ? _options$enableConsol : true;
  this.enableLogBox = (_options$enableLogBox = options.enableLogBox) != null ? _options$enableLogBox : true;
  this.maxLogBoxErrors = (_options$maxLogBoxErr = options.maxLogBoxErrors) != null ? _options$maxLogBoxErr : 3;
  this.originalConsoleError = console.error;
  this.originalConsoleWarn = console.warn;
  this.originalConsoleLog = console.log;
});
var safeLogger = exports.safeLogger = new SafeLogger({
  enableConsole: __DEV__,
  enableLogBox: __DEV__,
  maxLogBoxErrors: 3
});
var _default = exports.default = safeLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,