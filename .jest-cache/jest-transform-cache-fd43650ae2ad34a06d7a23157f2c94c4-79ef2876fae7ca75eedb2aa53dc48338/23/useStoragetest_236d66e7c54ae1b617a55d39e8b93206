60d46e6e393ccaa4f2f69eda53747ffd
"use strict";

_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    default: {
      getItem: jest.fn(),
      setItem: jest.fn(),
      removeItem: jest.fn()
    }
  };
});
_getJestObj().mock('../../../common/utils/memoryStorage', function () {
  return {
    memoryStorage: {
      getItem: jest.fn(),
      setItem: jest.fn(),
      removeItem: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useStorage = require("../hooks/useStorage");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useStorage', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('should provide storage methods', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useStorage.useStorage)();
      }),
      result = _renderHook.result;
    expect(typeof result.current.getItem).toBe('function');
    expect(typeof result.current.setItem).toBe('function');
    expect(typeof result.current.removeItem).toBe('function');
    expect(typeof result.current.isReady).toBe('boolean');
  });
  test('should handle storage operations', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useStorage.useStorage)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.setItem('test', 'value');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var value = yield result.current.getItem('test');
      expect(result.current.getItem).toBeDefined();
    }));
  }));
  test('should handle removeItem operation', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useStorage.useStorage)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.removeItem('test');
    }));
    expect(result.current.removeItem).toBeDefined();
  }));
  test('should maintain consistent interface', function () {
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useStorage.useStorage)();
      }),
      result = _renderHook4.result;
    expect(result.current).toHaveProperty('getItem');
    expect(result.current).toHaveProperty('setItem');
    expect(result.current).toHaveProperty('removeItem');
    expect(result.current).toHaveProperty('isReady');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJkZWZhdWx0IiwiZ2V0SXRlbSIsImplc3QiLCJmbiIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwibWVtb3J5U3RvcmFnZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX3VzZVN0b3JhZ2UiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwiX3JlbmRlckhvb2siLCJyZW5kZXJIb29rIiwidXNlU3RvcmFnZSIsInJlc3VsdCIsImV4cGVjdCIsImN1cnJlbnQiLCJ0b0JlIiwiaXNSZWFkeSIsIl9yZW5kZXJIb29rMiIsImFjdCIsInZhbHVlIiwidG9CZURlZmluZWQiLCJfcmVuZGVySG9vazMiLCJfcmVuZGVySG9vazQiLCJ0b0hhdmVQcm9wZXJ0eSJdLCJzb3VyY2VzIjpbInVzZVN0b3JhZ2UudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FjdCwgcmVuZGVySG9va30gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge3VzZVN0b3JhZ2V9IGZyb20gJy4uL2hvb2tzL3VzZVN0b3JhZ2UnO1xyXG5cclxuLy8gTW9jayBBc3luY1N0b3JhZ2VcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XHJcbiAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gICAgICAgIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICAgICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXHJcbiAgICB9LFxyXG59KSk7XHJcblxyXG4vLyBNb2NrIG1lbW9yeVN0b3JhZ2VcclxuamVzdC5tb2NrKCcuLi8uLi8uLi9jb21tb24vdXRpbHMvbWVtb3J5U3RvcmFnZScsICgpID0+ICh7XHJcbiAgICBtZW1vcnlTdG9yYWdlOiB7XHJcbiAgICAgICAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gICAgICAgIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICAgICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCksXHJcbiAgICB9LFxyXG59KSk7XHJcblxyXG5kZXNjcmliZSgndXNlU3RvcmFnZScsICgpID0+IHtcclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnc2hvdWxkIHByb3ZpZGUgc3RvcmFnZSBtZXRob2RzJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtyZXN1bHR9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yYWdlKCkpO1xyXG5cclxuICAgICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LmdldEl0ZW0pLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuY3VycmVudC5zZXRJdGVtKS50b0JlKCdmdW5jdGlvbicpO1xyXG4gICAgICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0LmN1cnJlbnQucmVtb3ZlSXRlbSkudG9CZSgnZnVuY3Rpb24nKTtcclxuICAgICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC5jdXJyZW50LmlzUmVhZHkpLnRvQmUoJ2Jvb2xlYW4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgc3RvcmFnZSBvcGVyYXRpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtyZXN1bHR9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yYWdlKCkpO1xyXG5cclxuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5zZXRJdGVtKCd0ZXN0JywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcmVzdWx0LmN1cnJlbnQuZ2V0SXRlbSgndGVzdCcpO1xyXG4gICAgICAgICAgICAvLyBOb3RlOiBJbiBhY3R1YWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgZGVwZW5kIG9uIHRoZSBzdG9yYWdlIGJhY2tlbmRcclxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmdldEl0ZW0pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHJlbW92ZUl0ZW0gb3BlcmF0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtyZXN1bHR9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yYWdlKCkpO1xyXG5cclxuICAgICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCByZXN1bHQuY3VycmVudC5yZW1vdmVJdGVtKCd0ZXN0Jyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5yZW1vdmVJdGVtKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVzdCgnc2hvdWxkIG1haW50YWluIGNvbnNpc3RlbnQgaW50ZXJmYWNlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtyZXN1bHR9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VTdG9yYWdlKCkpO1xyXG5cclxuICAgICAgICAvLyBWZXJpZnkgdGhlIGhvb2sgcmV0dXJucyB0aGUgZXhwZWN0ZWQgaW50ZXJmYWNlXHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnZ2V0SXRlbScpO1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudCkudG9IYXZlUHJvcGVydHkoJ3NldEl0ZW0nKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQpLnRvSGF2ZVByb3BlcnR5KCdyZW1vdmVJdGVtJyk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnaXNSZWFkeScpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUMxREMsT0FBTyxFQUFFO01BQ0xDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkMsT0FBTyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ2xCRSxVQUFVLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3hCO0VBQ0osQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdITCxXQUFBLEdBQUtDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRTtFQUFBLE9BQU87SUFDcERPLGFBQWEsRUFBRTtNQUNYTCxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbEJDLE9BQU8sRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUNsQkUsVUFBVSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQztJQUN4QjtFQUNKLENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBSSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQW5CSixJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBK0MsU0FBQVYsWUFBQTtFQUFBLElBQUFjLFFBQUEsR0FBQUosT0FBQTtJQUFBTixJQUFBLEdBQUFVLFFBQUEsQ0FBQVYsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFvQi9DVyxRQUFRLENBQUMsWUFBWSxFQUFFLFlBQU07RUFDekJDLFVBQVUsQ0FBQyxZQUFNO0lBQ2JaLElBQUksQ0FBQ2EsYUFBYSxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO0lBQ3pDLElBQUFDLFdBQUEsR0FBaUIsSUFBQUMsdUJBQVUsRUFBQztRQUFBLE9BQU0sSUFBQUMsc0JBQVUsRUFBQyxDQUFDO01BQUEsRUFBQztNQUF4Q0MsTUFBTSxHQUFBSCxXQUFBLENBQU5HLE1BQU07SUFFYkMsTUFBTSxDQUFDLE9BQU9ELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDckIsT0FBTyxDQUFDLENBQUNzQixJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3RERixNQUFNLENBQUMsT0FBT0QsTUFBTSxDQUFDRSxPQUFPLENBQUNsQixPQUFPLENBQUMsQ0FBQ21CLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDdERGLE1BQU0sQ0FBQyxPQUFPRCxNQUFNLENBQUNFLE9BQU8sQ0FBQ2pCLFVBQVUsQ0FBQyxDQUFDa0IsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6REYsTUFBTSxDQUFDLE9BQU9ELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDRSxPQUFPLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQztFQUN6RCxDQUFDLENBQUM7RUFFRlAsSUFBSSxDQUFDLGtDQUFrQyxNQUFBUCxrQkFBQSxDQUFBVCxPQUFBLEVBQUUsYUFBWTtJQUNqRCxJQUFBeUIsWUFBQSxHQUFpQixJQUFBUCx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXhDQyxNQUFNLEdBQUFLLFlBQUEsQ0FBTkwsTUFBTTtJQUViLE1BQU0sSUFBQU0sZ0JBQUcsTUFBQWpCLGtCQUFBLENBQUFULE9BQUEsRUFBQyxhQUFZO01BQ2xCLE1BQU1vQixNQUFNLENBQUNFLE9BQU8sQ0FBQ2xCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0lBQ2pELENBQUMsRUFBQztJQUVGLE1BQU0sSUFBQXNCLGdCQUFHLE1BQUFqQixrQkFBQSxDQUFBVCxPQUFBLEVBQUMsYUFBWTtNQUNsQixJQUFNMkIsS0FBSyxTQUFTUCxNQUFNLENBQUNFLE9BQU8sQ0FBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUM7TUFFbERvQixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDckIsT0FBTyxDQUFDLENBQUMyQixXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDLEVBQUM7RUFDTixDQUFDLEVBQUM7RUFFRlosSUFBSSxDQUFDLG9DQUFvQyxNQUFBUCxrQkFBQSxDQUFBVCxPQUFBLEVBQUUsYUFBWTtJQUNuRCxJQUFBNkIsWUFBQSxHQUFpQixJQUFBWCx1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXhDQyxNQUFNLEdBQUFTLFlBQUEsQ0FBTlQsTUFBTTtJQUViLE1BQU0sSUFBQU0sZ0JBQUcsTUFBQWpCLGtCQUFBLENBQUFULE9BQUEsRUFBQyxhQUFZO01BQ2xCLE1BQU1vQixNQUFNLENBQUNFLE9BQU8sQ0FBQ2pCLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQyxFQUFDO0lBRUZnQixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDakIsVUFBVSxDQUFDLENBQUN1QixXQUFXLENBQUMsQ0FBQztFQUNuRCxDQUFDLEVBQUM7RUFFRlosSUFBSSxDQUFDLHNDQUFzQyxFQUFFLFlBQU07SUFDL0MsSUFBQWMsWUFBQSxHQUFpQixJQUFBWix1QkFBVSxFQUFDO1FBQUEsT0FBTSxJQUFBQyxzQkFBVSxFQUFDLENBQUM7TUFBQSxFQUFDO01BQXhDQyxNQUFNLEdBQUFVLFlBQUEsQ0FBTlYsTUFBTTtJQUdiQyxNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNTLGNBQWMsQ0FBQyxTQUFTLENBQUM7SUFDaERWLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ1MsY0FBYyxDQUFDLFNBQVMsQ0FBQztJQUNoRFYsTUFBTSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDUyxjQUFjLENBQUMsWUFBWSxDQUFDO0lBQ25EVixNQUFNLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNTLGNBQWMsQ0FBQyxTQUFTLENBQUM7RUFDcEQsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119