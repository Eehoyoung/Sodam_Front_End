{"version":3,"names":["_safeLogger","require","ErrorType","exports","ErrorSeverity","ErrorMonitoringSystem","_classCallCheck2","default","errorReports","Map","performanceMetrics","isEnabled","__DEV__","maxReports","setupGlobalErrorHandlers","startPerformanceMonitoring","_createClass2","key","value","reportError","params","type","severity","message","stack","_params$context","context","errorId","generateErrorId","fullContext","Object","assign","getCurrentContext","existingReport","get","occurrenceCount","lastOccurrence","timestamp","newReport","id","resolved","firstOccurrence","set","size","oldestKey","keys","next","undefined","delete","logError","recordPerformanceMetric","metric","has","values","push","length","shift","getErrorReports","Array","from","getPerformanceMetrics","metrics","forEach","_toConsumableArray2","markErrorResolved","report","safeLogger","log","clearErrorReports","clear","getErrorStatistics","reports","stats","total","filter","r","unresolved","byType","bySeverity","mostFrequent","sort","a","b","slice","exportErrorReports","data","Date","toISOString","statistics","JSON","stringify","_this","global","process","on","reason","_promise","ASYNC_ERROR","HIGH","error","CRITICAL","_this2","_process","g","globalThis","isJest","jest","env","JEST_WORKER_ID","_unused","setInterval","performance","memory","memoryUsage","usedJSHeapSize","PERFORMANCE_ERROR","MEDIUM","Math","round","_performance$memory","deviceInfo","platform","version","appState","isAuthenticated","hash","split","reduce","charCodeAt","abs","logMessage","warn","LOW","errorMonitor","reportRenderError","RENDER_ERROR","reportAsyncError","reportNetworkError","NETWORK_ERROR","reportNavigationError","NAVIGATION_ERROR","reportLifecycleError","LIFECYCLE_ERROR","_default"],"sources":["errorMonitoring.ts"],"sourcesContent":["/**\r\n * 포괄적인 에러 모니터링 시스템\r\n * 고급 에러 추적, 크래시 리포팅, 성능 모니터링을 제공\r\n *\r\n * 생성일: 2025-07-21 05:42 (현지 시간)\r\n * 목적: 스택 트레이스 에러 방지 및 포괄적인 에러 처리 제공\r\n */\r\n\r\nimport {safeLogger} from './safeLogger';\r\n\r\n// 분류를 위한 에러 타입\r\nexport enum ErrorType {\r\n    RENDER_ERROR = 'RENDER_ERROR',\r\n    ASYNC_ERROR = 'ASYNC_ERROR',\r\n    NETWORK_ERROR = 'NETWORK_ERROR',\r\n    NAVIGATION_ERROR = 'NAVIGATION_ERROR',\r\n    STORAGE_ERROR = 'STORAGE_ERROR',\r\n    LIFECYCLE_ERROR = 'LIFECYCLE_ERROR',\r\n    PERFORMANCE_ERROR = 'PERFORMANCE_ERROR'\r\n}\r\n\r\n// 에러 심각도 레벨\r\nexport enum ErrorSeverity {\r\n    LOW = 'LOW',\r\n    MEDIUM = 'MEDIUM',\r\n    HIGH = 'HIGH',\r\n    CRITICAL = 'CRITICAL'\r\n}\r\n\r\n// 에러 컨텍스트 인터페이스\r\ninterface ErrorContext {\r\n    userId?: string;\r\n    screen?: string;\r\n    action?: string;\r\n    timestamp: string;\r\n    deviceInfo?: {\r\n        platform: string;\r\n        version: string;\r\n        model?: string;\r\n    };\r\n    appState?: {\r\n        isAuthenticated: boolean;\r\n        currentRoute?: string;\r\n        memoryUsage?: number;\r\n    };\r\n    additionalData?: Record<string, any>;\r\n}\r\n\r\n// 에러 리포트 인터페이스\r\ninterface ErrorReport {\r\n    id: string;\r\n    type: ErrorType;\r\n    severity: ErrorSeverity;\r\n    message: string;\r\n    stack?: string;\r\n    context: ErrorContext;\r\n    resolved: boolean;\r\n    occurrenceCount: number;\r\n    firstOccurrence: string;\r\n    lastOccurrence: string;\r\n}\r\n\r\nclass ErrorMonitoringSystem {\r\n    private errorReports: Map<string, ErrorReport> = new Map();\r\n    private performanceMetrics: Map<string, number[]> = new Map();\r\n    private isEnabled: boolean = __DEV__;\r\n    private maxReports: number = 100;\r\n\r\n    constructor() {\r\n        this.setupGlobalErrorHandlers();\r\n        this.startPerformanceMonitoring();\r\n    }\r\n\r\n    /**\r\n     * 에러 리포트\r\n     */\r\n    public reportError(params: {\r\n        type: ErrorType;\r\n        severity: ErrorSeverity;\r\n        message: string;\r\n        stack?: string;\r\n        context?: Partial<ErrorContext>;\r\n    }) {\r\n        if (!this.isEnabled) return;\r\n\r\n        const {type, severity, message, stack, context = {}} = params;\r\n        const errorId = this.generateErrorId(type, message);\r\n        const fullContext = {...this.getCurrentContext(), ...context};\r\n\r\n        const existingReport = this.errorReports.get(errorId);\r\n\r\n        if (existingReport) {\r\n            // 기존 리포트 업데이트\r\n            existingReport.occurrenceCount++;\r\n            existingReport.lastOccurrence = fullContext.timestamp;\r\n            existingReport.context = fullContext;\r\n        } else {\r\n            // 새 리포트 생성\r\n            const newReport: ErrorReport = {\r\n                id: errorId,\r\n                type,\r\n                severity,\r\n                message,\r\n                stack,\r\n                context: fullContext,\r\n                resolved: false,\r\n                occurrenceCount: 1,\r\n                firstOccurrence: fullContext.timestamp,\r\n                lastOccurrence: fullContext.timestamp\r\n            };\r\n\r\n            this.errorReports.set(errorId, newReport);\r\n\r\n            // Limit the number of stored reports\r\n            if (this.errorReports.size > this.maxReports) {\r\n                const oldestKey = this.errorReports.keys().next().value;\r\n                if (oldestKey !== undefined) {\r\n                    this.errorReports.delete(oldestKey);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Log the error using safe logger\r\n        this.logError(this.errorReports.get(errorId)!);\r\n    }\r\n\r\n    /**\r\n     * Record performance metric\r\n     */\r\n    public recordPerformanceMetric(metric: string, value: number) {\r\n        if (!this.isEnabled) return;\r\n\r\n        if (!this.performanceMetrics.has(metric)) {\r\n            this.performanceMetrics.set(metric, []);\r\n        }\r\n\r\n        const values = this.performanceMetrics.get(metric)!;\r\n        values.push(value);\r\n\r\n        // Keep only last 100 values\r\n        if (values.length > 100) {\r\n            values.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get error reports\r\n     */\r\n    public getErrorReports(): ErrorReport[] {\r\n        return Array.from(this.errorReports.values());\r\n    }\r\n\r\n    /**\r\n     * Get performance metrics\r\n     */\r\n    public getPerformanceMetrics(): Record<string, number[]> {\r\n        const metrics: Record<string, number[]> = {};\r\n        this.performanceMetrics.forEach((values, key) => {\r\n            metrics[key] = [...values];\r\n        });\r\n        return metrics;\r\n    }\r\n\r\n    /**\r\n     * Mark error as resolved\r\n     */\r\n    public markErrorResolved(errorId: string) {\r\n        const report = this.errorReports.get(errorId);\r\n        if (report) {\r\n            report.resolved = true;\r\n            safeLogger.log(`[ERROR_MONITOR] Error resolved: ${errorId}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all error reports\r\n     */\r\n    public clearErrorReports() {\r\n        this.errorReports.clear();\r\n        safeLogger.log('[ERROR_MONITOR] All error reports cleared');\r\n    }\r\n\r\n    /**\r\n     * Get error statistics\r\n     */\r\n    public getErrorStatistics() {\r\n        const reports = this.getErrorReports();\r\n        const stats = {\r\n            total: reports.length,\r\n            resolved: reports.filter(r => r.resolved).length,\r\n            unresolved: reports.filter(r => !r.resolved).length,\r\n            byType: {} as Record<ErrorType, number>,\r\n            bySeverity: {} as Record<ErrorSeverity, number>,\r\n            mostFrequent: reports.sort((a, b) => b.occurrenceCount - a.occurrenceCount).slice(0, 5)\r\n        };\r\n\r\n        // Count by type\r\n        Object.values(ErrorType).forEach(type => {\r\n            stats.byType[type] = reports.filter(r => r.type === type).length;\r\n        });\r\n\r\n        // Count by severity\r\n        Object.values(ErrorSeverity).forEach(severity => {\r\n            stats.bySeverity[severity] = reports.filter(r => r.severity === severity).length;\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    /**\r\n     * Export error reports for analysis\r\n     */\r\n    public exportErrorReports(): string {\r\n        const data = {\r\n            timestamp: new Date().toISOString(),\r\n            reports: this.getErrorReports(),\r\n            statistics: this.getErrorStatistics(),\r\n            performanceMetrics: this.getPerformanceMetrics()\r\n        };\r\n\r\n        return JSON.stringify(data, null, 2);\r\n    }\r\n\r\n    /**\r\n     * 전역 에러 핸들러 설정\r\n     */\r\n    private setupGlobalErrorHandlers() {\r\n        if (!this.isEnabled) return;\r\n\r\n        // 처리되지 않은 Promise 거부 처리\r\n        if (typeof global !== 'undefined' && global.process) {\r\n            global.process.on?.('unhandledRejection', (reason: any, _promise: Promise<any>) => {\r\n                this.reportError({\r\n                    type: ErrorType.ASYNC_ERROR,\r\n                    severity: ErrorSeverity.HIGH,\r\n                    message: `Unhandled Promise Rejection: ${reason}`,\r\n                    stack: reason?.stack,\r\n                    context: this.getCurrentContext()\r\n                });\r\n            });\r\n\r\n            // 처리되지 않은 예외 처리\r\n            global.process.on?.('uncaughtException', (error: Error) => {\r\n                this.reportError({\r\n                    type: ErrorType.ASYNC_ERROR,\r\n                    severity: ErrorSeverity.CRITICAL,\r\n                    message: `Uncaught Exception: ${error.message}`,\r\n                    stack: error.stack,\r\n                    context: this.getCurrentContext()\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 성능 모니터링 시작\r\n     */\r\n    private startPerformanceMonitoring() {\r\n        if (!this.isEnabled) return;\r\n\r\n        // In Jest/test environment, skip starting intervals to avoid open handles\r\n        try {\r\n            const g: any = typeof globalThis !== 'undefined' ? (globalThis as any) : {};\r\n            const isJest = !!g.jest || (typeof process !== 'undefined' && (process as any)?.env?.JEST_WORKER_ID);\r\n            if (isJest) return;\r\n        } catch {\r\n            // ignore env detection errors\r\n        }\r\n\r\n        // 메모리 사용량 모니터링 (React Native용 타입 단언 포함)\r\n        setInterval(() => {\r\n            const performance = global.performance as any;\r\n            if (performance?.memory) {\r\n                const memoryUsage = performance.memory.usedJSHeapSize;\r\n                this.recordPerformanceMetric('memoryUsage', memoryUsage);\r\n\r\n                // 메모리 사용량이 너무 높으면 알림 (>50MB)\r\n                if (memoryUsage > 50 * 1024 * 1024) {\r\n                    this.reportError({\r\n                        type: ErrorType.PERFORMANCE_ERROR,\r\n                        severity: ErrorSeverity.MEDIUM,\r\n                        message: `High memory usage detected: ${Math.round(memoryUsage / 1024 / 1024)}MB`,\r\n                        context: this.getCurrentContext()\r\n                    });\r\n                }\r\n            }\r\n        }, 30000); // 30초마다 확인\r\n    }\r\n\r\n    /**\r\n     * 현재 에러 컨텍스트 가져오기\r\n     */\r\n    private getCurrentContext(): ErrorContext {\r\n        const performance = global.performance as any;\r\n        return {\r\n            timestamp: new Date().toISOString(),\r\n            deviceInfo: {\r\n                platform: 'react-native',\r\n                version: '0.80.1'\r\n            },\r\n            appState: {\r\n                isAuthenticated: false, // AuthContext에서 채워질 값\r\n                memoryUsage: performance?.memory?.usedJSHeapSize\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 고유한 에러 ID 생성\r\n     */\r\n    private generateErrorId(type: ErrorType, message: string): string {\r\n        const hash = message.split('').reduce((a, b) => {\r\n            a = ((a << 5) - a) + b.charCodeAt(0);\r\n            return a & a;\r\n        }, 0);\r\n        return `${type}_${Math.abs(hash)}`;\r\n    }\r\n\r\n    /**\r\n     * Log error using safe logger\r\n     */\r\n    private logError(report: ErrorReport) {\r\n        const logMessage = `[ERROR_MONITOR] ${report.type} - ${report.severity}: ${report.message}`;\r\n\r\n        switch (report.severity) {\r\n            case ErrorSeverity.CRITICAL:\r\n                safeLogger.error(logMessage, report);\r\n                break;\r\n            case ErrorSeverity.HIGH:\r\n                safeLogger.error(logMessage, report);\r\n                break;\r\n            case ErrorSeverity.MEDIUM:\r\n                safeLogger.warn(logMessage, report);\r\n                break;\r\n            case ErrorSeverity.LOW:\r\n                safeLogger.log(logMessage, report);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// Global error monitoring instance\r\nexport const errorMonitor = new ErrorMonitoringSystem();\r\n\r\n// Convenience functions for common error types\r\nexport const reportRenderError = (message: string, stack?: string, context?: Partial<ErrorContext>) => {\r\n    errorMonitor.reportError({\r\n        type: ErrorType.RENDER_ERROR,\r\n        severity: ErrorSeverity.HIGH,\r\n        message,\r\n        stack,\r\n        context\r\n    });\r\n};\r\n\r\nexport const reportAsyncError = (message: string, stack?: string, context?: Partial<ErrorContext>) => {\r\n    errorMonitor.reportError({\r\n        type: ErrorType.ASYNC_ERROR,\r\n        severity: ErrorSeverity.MEDIUM,\r\n        message,\r\n        stack,\r\n        context\r\n    });\r\n};\r\n\r\nexport const reportNetworkError = (message: string, context?: Partial<ErrorContext>) => {\r\n    errorMonitor.reportError({\r\n        type: ErrorType.NETWORK_ERROR,\r\n        severity: ErrorSeverity.MEDIUM,\r\n        message,\r\n        context\r\n    });\r\n};\r\n\r\nexport const reportNavigationError = (message: string, context?: Partial<ErrorContext>) => {\r\n    errorMonitor.reportError({\r\n        type: ErrorType.NAVIGATION_ERROR,\r\n        severity: ErrorSeverity.MEDIUM,\r\n        message,\r\n        context\r\n    });\r\n};\r\n\r\nexport const reportLifecycleError = (message: string, stack?: string, context?: Partial<ErrorContext>) => {\r\n    errorMonitor.reportError({\r\n        type: ErrorType.LIFECYCLE_ERROR,\r\n        severity: ErrorSeverity.HIGH,\r\n        message,\r\n        stack,\r\n        context\r\n    });\r\n};\r\n\r\nexport default errorMonitor;\r\n"],"mappings":"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","ignoreList":[]}