bc48ab99303e29dceda27d9c80418a7e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportRenderError = exports.reportNetworkError = exports.reportNavigationError = exports.reportLifecycleError = exports.reportAsyncError = exports.errorMonitor = exports.default = exports.ErrorType = exports.ErrorSeverity = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _safeLogger = require("./safeLogger");
var ErrorType = exports.ErrorType = function (ErrorType) {
  ErrorType["RENDER_ERROR"] = "RENDER_ERROR";
  ErrorType["ASYNC_ERROR"] = "ASYNC_ERROR";
  ErrorType["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorType["NAVIGATION_ERROR"] = "NAVIGATION_ERROR";
  ErrorType["STORAGE_ERROR"] = "STORAGE_ERROR";
  ErrorType["LIFECYCLE_ERROR"] = "LIFECYCLE_ERROR";
  ErrorType["PERFORMANCE_ERROR"] = "PERFORMANCE_ERROR";
  return ErrorType;
}({});
var ErrorSeverity = exports.ErrorSeverity = function (ErrorSeverity) {
  ErrorSeverity["LOW"] = "LOW";
  ErrorSeverity["MEDIUM"] = "MEDIUM";
  ErrorSeverity["HIGH"] = "HIGH";
  ErrorSeverity["CRITICAL"] = "CRITICAL";
  return ErrorSeverity;
}({});
var ErrorMonitoringSystem = function () {
  function ErrorMonitoringSystem() {
    (0, _classCallCheck2.default)(this, ErrorMonitoringSystem);
    this.errorReports = new Map();
    this.performanceMetrics = new Map();
    this.isEnabled = __DEV__;
    this.maxReports = 100;
    this.setupGlobalErrorHandlers();
    this.startPerformanceMonitoring();
  }
  return (0, _createClass2.default)(ErrorMonitoringSystem, [{
    key: "reportError",
    value: function reportError(params) {
      if (!this.isEnabled) return;
      var type = params.type,
        severity = params.severity,
        message = params.message,
        stack = params.stack,
        _params$context = params.context,
        context = _params$context === void 0 ? {} : _params$context;
      var errorId = this.generateErrorId(type, message);
      var fullContext = Object.assign({}, this.getCurrentContext(), context);
      var existingReport = this.errorReports.get(errorId);
      if (existingReport) {
        existingReport.occurrenceCount++;
        existingReport.lastOccurrence = fullContext.timestamp;
        existingReport.context = fullContext;
      } else {
        var newReport = {
          id: errorId,
          type: type,
          severity: severity,
          message: message,
          stack: stack,
          context: fullContext,
          resolved: false,
          occurrenceCount: 1,
          firstOccurrence: fullContext.timestamp,
          lastOccurrence: fullContext.timestamp
        };
        this.errorReports.set(errorId, newReport);
        if (this.errorReports.size > this.maxReports) {
          var oldestKey = this.errorReports.keys().next().value;
          if (oldestKey !== undefined) {
            this.errorReports.delete(oldestKey);
          }
        }
      }
      this.logError(this.errorReports.get(errorId));
    }
  }, {
    key: "recordPerformanceMetric",
    value: function recordPerformanceMetric(metric, value) {
      if (!this.isEnabled) return;
      if (!this.performanceMetrics.has(metric)) {
        this.performanceMetrics.set(metric, []);
      }
      var values = this.performanceMetrics.get(metric);
      values.push(value);
      if (values.length > 100) {
        values.shift();
      }
    }
  }, {
    key: "getErrorReports",
    value: function getErrorReports() {
      return Array.from(this.errorReports.values());
    }
  }, {
    key: "getPerformanceMetrics",
    value: function getPerformanceMetrics() {
      var metrics = {};
      this.performanceMetrics.forEach(function (values, key) {
        metrics[key] = (0, _toConsumableArray2.default)(values);
      });
      return metrics;
    }
  }, {
    key: "markErrorResolved",
    value: function markErrorResolved(errorId) {
      var report = this.errorReports.get(errorId);
      if (report) {
        report.resolved = true;
        _safeLogger.safeLogger.log(`[ERROR_MONITOR] Error resolved: ${errorId}`);
      }
    }
  }, {
    key: "clearErrorReports",
    value: function clearErrorReports() {
      this.errorReports.clear();
      _safeLogger.safeLogger.log('[ERROR_MONITOR] All error reports cleared');
    }
  }, {
    key: "getErrorStatistics",
    value: function getErrorStatistics() {
      var reports = this.getErrorReports();
      var stats = {
        total: reports.length,
        resolved: reports.filter(function (r) {
          return r.resolved;
        }).length,
        unresolved: reports.filter(function (r) {
          return !r.resolved;
        }).length,
        byType: {},
        bySeverity: {},
        mostFrequent: reports.sort(function (a, b) {
          return b.occurrenceCount - a.occurrenceCount;
        }).slice(0, 5)
      };
      Object.values(ErrorType).forEach(function (type) {
        stats.byType[type] = reports.filter(function (r) {
          return r.type === type;
        }).length;
      });
      Object.values(ErrorSeverity).forEach(function (severity) {
        stats.bySeverity[severity] = reports.filter(function (r) {
          return r.severity === severity;
        }).length;
      });
      return stats;
    }
  }, {
    key: "exportErrorReports",
    value: function exportErrorReports() {
      var data = {
        timestamp: new Date().toISOString(),
        reports: this.getErrorReports(),
        statistics: this.getErrorStatistics(),
        performanceMetrics: this.getPerformanceMetrics()
      };
      return JSON.stringify(data, null, 2);
    }
  }, {
    key: "setupGlobalErrorHandlers",
    value: function setupGlobalErrorHandlers() {
      var _this = this;
      if (!this.isEnabled) return;
      if (typeof global !== 'undefined' && global.process) {
        global.process.on == null || global.process.on('unhandledRejection', function (reason, _promise) {
          _this.reportError({
            type: ErrorType.ASYNC_ERROR,
            severity: ErrorSeverity.HIGH,
            message: `Unhandled Promise Rejection: ${reason}`,
            stack: reason == null ? void 0 : reason.stack,
            context: _this.getCurrentContext()
          });
        });
        global.process.on == null || global.process.on('uncaughtException', function (error) {
          _this.reportError({
            type: ErrorType.ASYNC_ERROR,
            severity: ErrorSeverity.CRITICAL,
            message: `Uncaught Exception: ${error.message}`,
            stack: error.stack,
            context: _this.getCurrentContext()
          });
        });
      }
    }
  }, {
    key: "startPerformanceMonitoring",
    value: function startPerformanceMonitoring() {
      var _this2 = this;
      if (!this.isEnabled) return;
      try {
        var _process;
        var g = typeof globalThis !== 'undefined' ? globalThis : {};
        var isJest = !!g.jest || typeof process !== 'undefined' && ((_process = process) == null || (_process = _process.env) == null ? void 0 : _process.JEST_WORKER_ID);
        if (isJest) return;
      } catch (_unused) {}
      setInterval(function () {
        var performance = global.performance;
        if (performance != null && performance.memory) {
          var memoryUsage = performance.memory.usedJSHeapSize;
          _this2.recordPerformanceMetric('memoryUsage', memoryUsage);
          if (memoryUsage > 50 * 1024 * 1024) {
            _this2.reportError({
              type: ErrorType.PERFORMANCE_ERROR,
              severity: ErrorSeverity.MEDIUM,
              message: `High memory usage detected: ${Math.round(memoryUsage / 1024 / 1024)}MB`,
              context: _this2.getCurrentContext()
            });
          }
        }
      }, 30000);
    }
  }, {
    key: "getCurrentContext",
    value: function getCurrentContext() {
      var _performance$memory;
      var performance = global.performance;
      return {
        timestamp: new Date().toISOString(),
        deviceInfo: {
          platform: 'react-native',
          version: '0.80.1'
        },
        appState: {
          isAuthenticated: false,
          memoryUsage: performance == null || (_performance$memory = performance.memory) == null ? void 0 : _performance$memory.usedJSHeapSize
        }
      };
    }
  }, {
    key: "generateErrorId",
    value: function generateErrorId(type, message) {
      var hash = message.split('').reduce(function (a, b) {
        a = (a << 5) - a + b.charCodeAt(0);
        return a & a;
      }, 0);
      return `${type}_${Math.abs(hash)}`;
    }
  }, {
    key: "logError",
    value: function logError(report) {
      var logMessage = `[ERROR_MONITOR] ${report.type} - ${report.severity}: ${report.message}`;
      switch (report.severity) {
        case ErrorSeverity.CRITICAL:
          _safeLogger.safeLogger.error(logMessage, report);
          break;
        case ErrorSeverity.HIGH:
          _safeLogger.safeLogger.error(logMessage, report);
          break;
        case ErrorSeverity.MEDIUM:
          _safeLogger.safeLogger.warn(logMessage, report);
          break;
        case ErrorSeverity.LOW:
          _safeLogger.safeLogger.log(logMessage, report);
          break;
      }
    }
  }]);
}();
var errorMonitor = exports.errorMonitor = new ErrorMonitoringSystem();
var reportRenderError = exports.reportRenderError = function reportRenderError(message, stack, context) {
  errorMonitor.reportError({
    type: ErrorType.RENDER_ERROR,
    severity: ErrorSeverity.HIGH,
    message: message,
    stack: stack,
    context: context
  });
};
var reportAsyncError = exports.reportAsyncError = function reportAsyncError(message, stack, context) {
  errorMonitor.reportError({
    type: ErrorType.ASYNC_ERROR,
    severity: ErrorSeverity.MEDIUM,
    message: message,
    stack: stack,
    context: context
  });
};
var reportNetworkError = exports.reportNetworkError = function reportNetworkError(message, context) {
  errorMonitor.reportError({
    type: ErrorType.NETWORK_ERROR,
    severity: ErrorSeverity.MEDIUM,
    message: message,
    context: context
  });
};
var reportNavigationError = exports.reportNavigationError = function reportNavigationError(message, context) {
  errorMonitor.reportError({
    type: ErrorType.NAVIGATION_ERROR,
    severity: ErrorSeverity.MEDIUM,
    message: message,
    context: context
  });
};
var reportLifecycleError = exports.reportLifecycleError = function reportLifecycleError(message, stack, context) {
  errorMonitor.reportError({
    type: ErrorType.LIFECYCLE_ERROR,
    severity: ErrorSeverity.HIGH,
    message: message,
    stack: stack,
    context: context
  });
};
var _default = exports.default = errorMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,