05a0e1ffd06970ad9d0826ead06a7b60
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _reactNative = require("react-native");
var _SafeAreaProviderGuard = _interopRequireDefault(require("../SafeAreaProviderGuard"));
var _jsxRuntime = require("react/jsx-runtime");
var Child = function Child() {
  return _react.default.createElement('Child');
};
describe('SafeAreaProviderGuard', function () {
  var originalGetConfig = _reactNative.UIManager.getViewManagerConfig;
  afterEach(function () {
    _reactNative.UIManager.getViewManagerConfig = originalGetConfig;
    jest.restoreAllMocks();
  });
  test('falls back to View when RNCSafeAreaProvider is missing', function () {
    _reactNative.UIManager.getViewManagerConfig = jest.fn(function () {
      return null;
    });
    var warnSpy = jest.spyOn(global.console, 'warn').mockImplementation(function () {});
    var renderer = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_SafeAreaProviderGuard.default, {
      children: (0, _jsxRuntime.jsx)(Child, {})
    }));
    var tree = renderer.toJSON();
    expect(tree).toBeTruthy();
    expect(warnSpy).toHaveBeenCalled();
  });
  test('uses SafeAreaProvider when ViewManager is available', function () {
    _reactNative.UIManager.getViewManagerConfig = jest.fn(function () {
      return {
        name: 'RNCSafeAreaProvider'
      };
    });
    var warnSpy = jest.spyOn(global.console, 'warn').mockImplementation(function () {});
    var renderer = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_SafeAreaProviderGuard.default, {
      children: (0, _jsxRuntime.jsx)(Child, {})
    }));
    var tree = renderer.toJSON();
    expect(tree).toBeTruthy();
    expect(warnSpy).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFRlc3RSZW5kZXJlciIsIl9yZWFjdE5hdGl2ZSIsIl9TYWZlQXJlYVByb3ZpZGVyR3VhcmQiLCJfanN4UnVudGltZSIsIkNoaWxkIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiZGVzY3JpYmUiLCJvcmlnaW5hbEdldENvbmZpZyIsIlVJTWFuYWdlciIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwiYWZ0ZXJFYWNoIiwiamVzdCIsInJlc3RvcmVBbGxNb2NrcyIsInRlc3QiLCJmbiIsIndhcm5TcHkiLCJzcHlPbiIsImdsb2JhbCIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJyZW5kZXJlciIsIlJlYWN0VGVzdFJlbmRlcmVyIiwiY3JlYXRlIiwianN4IiwiZGVmYXVsdCIsImNoaWxkcmVuIiwidHJlZSIsInRvSlNPTiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibmFtZSIsIm5vdCJdLCJzb3VyY2VzIjpbIlNhZmVBcmVhUHJvdmlkZXJHdWFyZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RUZXN0UmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XHJcbmltcG9ydCB7IFVJTWFuYWdlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBTYWZlQXJlYVByb3ZpZGVyR3VhcmQgZnJvbSAnLi4vU2FmZUFyZWFQcm92aWRlckd1YXJkJztcclxuXHJcbmNvbnN0IENoaWxkID0gKCkgPT4gUmVhY3QuY3JlYXRlRWxlbWVudCgnQ2hpbGQnKTtcclxuXHJcbmRlc2NyaWJlKCdTYWZlQXJlYVByb3ZpZGVyR3VhcmQnLCAoKSA9PiB7XHJcbiAgY29uc3Qgb3JpZ2luYWxHZXRDb25maWcgPSAoVUlNYW5hZ2VyIGFzIGFueSkuZ2V0Vmlld01hbmFnZXJDb25maWc7XHJcblxyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICAoVUlNYW5hZ2VyIGFzIGFueSkuZ2V0Vmlld01hbmFnZXJDb25maWcgPSBvcmlnaW5hbEdldENvbmZpZztcclxuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ2ZhbGxzIGJhY2sgdG8gVmlldyB3aGVuIFJOQ1NhZmVBcmVhUHJvdmlkZXIgaXMgbWlzc2luZycsICgpID0+IHtcclxuICAgIChVSU1hbmFnZXIgYXMgYW55KS5nZXRWaWV3TWFuYWdlckNvbmZpZyA9IGplc3QuZm4oKCkgPT4gbnVsbCk7XHJcbiAgICBjb25zdCB3YXJuU3B5ID0gamVzdC5zcHlPbihnbG9iYWwuY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xyXG5cclxuICAgIGNvbnN0IHJlbmRlcmVyID0gUmVhY3RUZXN0UmVuZGVyZXIuY3JlYXRlKFxyXG4gICAgICA8U2FmZUFyZWFQcm92aWRlckd1YXJkPlxyXG4gICAgICAgIDxDaGlsZCAvPlxyXG4gICAgICA8L1NhZmVBcmVhUHJvdmlkZXJHdWFyZD5cclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLnRvSlNPTigpO1xyXG4gICAgZXhwZWN0KHRyZWUpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdCh3YXJuU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3VzZXMgU2FmZUFyZWFQcm92aWRlciB3aGVuIFZpZXdNYW5hZ2VyIGlzIGF2YWlsYWJsZScsICgpID0+IHtcclxuICAgIChVSU1hbmFnZXIgYXMgYW55KS5nZXRWaWV3TWFuYWdlckNvbmZpZyA9IGplc3QuZm4oKCkgPT4gKHsgbmFtZTogJ1JOQ1NhZmVBcmVhUHJvdmlkZXInIH0pKTtcclxuICAgIGNvbnN0IHdhcm5TcHkgPSBqZXN0LnNweU9uKGdsb2JhbC5jb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XHJcblxyXG4gICAgY29uc3QgcmVuZGVyZXIgPSBSZWFjdFRlc3RSZW5kZXJlci5jcmVhdGUoXHJcbiAgICAgIDxTYWZlQXJlYVByb3ZpZGVyR3VhcmQ+XHJcbiAgICAgICAgPENoaWxkIC8+XHJcbiAgICAgIDwvU2FmZUFyZWFQcm92aWRlckd1YXJkPlxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCB0cmVlID0gcmVuZGVyZXIudG9KU09OKCk7XHJcbiAgICBleHBlY3QodHJlZSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHdhcm5TcHkpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxzQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQTZELElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUU3RCxJQUFNSyxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBQTtFQUFBLE9BQVNDLGNBQUssQ0FBQ0MsYUFBYSxDQUFDLE9BQU8sQ0FBQztBQUFBO0FBRWhEQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtFQUN0QyxJQUFNQyxpQkFBaUIsR0FBSUMsc0JBQVMsQ0FBU0Msb0JBQW9CO0VBRWpFQyxTQUFTLENBQUMsWUFBTTtJQUNiRixzQkFBUyxDQUFTQyxvQkFBb0IsR0FBR0YsaUJBQWlCO0lBQzNESSxJQUFJLENBQUNDLGVBQWUsQ0FBQyxDQUFDO0VBQ3hCLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsd0RBQXdELEVBQUUsWUFBTTtJQUNsRUwsc0JBQVMsQ0FBU0Msb0JBQW9CLEdBQUdFLElBQUksQ0FBQ0csRUFBRSxDQUFDO01BQUEsT0FBTSxJQUFJO0lBQUEsRUFBQztJQUM3RCxJQUFNQyxPQUFPLEdBQUdKLElBQUksQ0FBQ0ssS0FBSyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUMsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUUvRSxJQUFNQyxRQUFRLEdBQUdDLDBCQUFpQixDQUFDQyxNQUFNLENBQ3ZDLElBQUFwQixXQUFBLENBQUFxQixHQUFBLEVBQUN0QixzQkFBQSxDQUFBdUIsT0FBcUI7TUFBQUMsUUFBQSxFQUNwQixJQUFBdkIsV0FBQSxDQUFBcUIsR0FBQSxFQUFDcEIsS0FBSyxJQUFFO0lBQUMsQ0FDWSxDQUN6QixDQUFDO0lBRUQsSUFBTXVCLElBQUksR0FBR04sUUFBUSxDQUFDTyxNQUFNLENBQUMsQ0FBQztJQUM5QkMsTUFBTSxDQUFDRixJQUFJLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDekJELE1BQU0sQ0FBQ2IsT0FBTyxDQUFDLENBQUNlLGdCQUFnQixDQUFDLENBQUM7RUFDcEMsQ0FBQyxDQUFDO0VBRUZqQixJQUFJLENBQUMscURBQXFELEVBQUUsWUFBTTtJQUMvREwsc0JBQVMsQ0FBU0Msb0JBQW9CLEdBQUdFLElBQUksQ0FBQ0csRUFBRSxDQUFDO01BQUEsT0FBTztRQUFFaUIsSUFBSSxFQUFFO01BQXNCLENBQUM7SUFBQSxDQUFDLENBQUM7SUFDMUYsSUFBTWhCLE9BQU8sR0FBR0osSUFBSSxDQUFDSyxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO0lBRS9FLElBQU1DLFFBQVEsR0FBR0MsMEJBQWlCLENBQUNDLE1BQU0sQ0FDdkMsSUFBQXBCLFdBQUEsQ0FBQXFCLEdBQUEsRUFBQ3RCLHNCQUFBLENBQUF1QixPQUFxQjtNQUFBQyxRQUFBLEVBQ3BCLElBQUF2QixXQUFBLENBQUFxQixHQUFBLEVBQUNwQixLQUFLLElBQUU7SUFBQyxDQUNZLENBQ3pCLENBQUM7SUFFRCxJQUFNdUIsSUFBSSxHQUFHTixRQUFRLENBQUNPLE1BQU0sQ0FBQyxDQUFDO0lBQzlCQyxNQUFNLENBQUNGLElBQUksQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUN6QkQsTUFBTSxDQUFDYixPQUFPLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQ0YsZ0JBQWdCLENBQUMsQ0FBQztFQUN4QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=