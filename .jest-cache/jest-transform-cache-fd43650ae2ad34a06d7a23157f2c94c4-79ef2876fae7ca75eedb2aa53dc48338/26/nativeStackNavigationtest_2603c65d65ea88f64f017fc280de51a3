9f5afdb677a116bbc0ee14dca777c923
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _nativeStack = require("@react-navigation/native-stack");
var _jsxRuntime = require("react/jsx-runtime");
var TestScreen1 = function TestScreen1() {
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
};
var TestScreen2 = function TestScreen2() {
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
};
var Stack = (0, _nativeStack.createNativeStackNavigator)();
var TestNavigator = function TestNavigator() {
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsxs)(Stack.Navigator, {
      children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "Screen1",
        component: TestScreen1
      }), (0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "Screen2",
        component: TestScreen2
      })]
    })
  });
};
describe('Native Stack Navigation', function () {
  beforeEach(function () {
    console.log('[DEBUG_LOG] Starting Native Stack Navigation test');
  });
  test('creates Native Stack Navigator without errors', function () {
    console.log('[DEBUG_LOG] Testing Native Stack Navigator creation');
    var component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestNavigator, {}));
    expect(component).toBeTruthy();
    console.log('[DEBUG_LOG] Native Stack Navigator created successfully');
  });
  test('Native Stack Navigator is properly imported', function () {
    console.log('[DEBUG_LOG] Testing createNativeStackNavigator import');
    expect(typeof _nativeStack.createNativeStackNavigator).toBe('function');
    console.log('[DEBUG_LOG] createNativeStackNavigator import verified');
  });
  test('Stack screens can be configured', function () {
    console.log('[DEBUG_LOG] Testing Stack screen configuration');
    var stack = (0, _nativeStack.createNativeStackNavigator)();
    expect(stack.Screen).toBeDefined();
    expect(stack.Navigator).toBeDefined();
    console.log('[DEBUG_LOG] Stack screen configuration verified');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9uYXRpdmUiLCJfbmF0aXZlU3RhY2siLCJfanN4UnVudGltZSIsIlRlc3RTY3JlZW4xIiwianN4IiwiRnJhZ21lbnQiLCJUZXN0U2NyZWVuMiIsIlN0YWNrIiwiY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IiLCJUZXN0TmF2aWdhdG9yIiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4cyIsIk5hdmlnYXRvciIsIlNjcmVlbiIsIm5hbWUiLCJjb21wb25lbnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjb25zb2xlIiwibG9nIiwidGVzdCIsInJlbmRlciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0JlIiwic3RhY2siLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIm5hdGl2ZVN0YWNrTmF2aWdhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24gVGVzdHNcclxuICogVmVyaWZpZXMgTmF0aXZlIFN0YWNrIE5hdmlnYXRvciBmdW5jdGlvbmFsaXR5IGFmdGVyIFJOR0ggbWlncmF0aW9uXHJcbiAqL1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25Db250YWluZXIgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgeyBjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvciB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcblxyXG4vLyBNb2NrIGNvbXBvbmVudHMgZm9yIHRlc3RpbmdcclxuY29uc3QgVGVzdFNjcmVlbjEgPSAoKSA9PiA8PjwvPjtcclxuY29uc3QgVGVzdFNjcmVlbjIgPSAoKSA9PiA8PjwvPjtcclxuXHJcbmNvbnN0IFN0YWNrID0gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IoKTtcclxuXHJcbmNvbnN0IFRlc3ROYXZpZ2F0b3IgPSAoKSA9PiAoXHJcbiAgPE5hdmlnYXRpb25Db250YWluZXI+XHJcbiAgICA8U3RhY2suTmF2aWdhdG9yPlxyXG4gICAgICA8U3RhY2suU2NyZWVuIG5hbWU9XCJTY3JlZW4xXCIgY29tcG9uZW50PXtUZXN0U2NyZWVuMX0gLz5cclxuICAgICAgPFN0YWNrLlNjcmVlbiBuYW1lPVwiU2NyZWVuMlwiIGNvbXBvbmVudD17VGVzdFNjcmVlbjJ9IC8+XHJcbiAgICA8L1N0YWNrLk5hdmlnYXRvcj5cclxuICA8L05hdmlnYXRpb25Db250YWluZXI+XHJcbik7XHJcblxyXG5kZXNjcmliZSgnTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24nLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gU3RhcnRpbmcgTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24gdGVzdCcpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdjcmVhdGVzIE5hdGl2ZSBTdGFjayBOYXZpZ2F0b3Igd2l0aG91dCBlcnJvcnMnLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gVGVzdGluZyBOYXRpdmUgU3RhY2sgTmF2aWdhdG9yIGNyZWF0aW9uJyk7XHJcblxyXG4gICAgY29uc3QgY29tcG9uZW50ID0gcmVuZGVyKDxUZXN0TmF2aWdhdG9yIC8+KTtcclxuICAgIGV4cGVjdChjb21wb25lbnQpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gTmF0aXZlIFN0YWNrIE5hdmlnYXRvciBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdOYXRpdmUgU3RhY2sgTmF2aWdhdG9yIGlzIHByb3Blcmx5IGltcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tERUJVR19MT0ddIFRlc3RpbmcgY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IgaW1wb3J0Jyk7XHJcblxyXG4gICAgZXhwZWN0KHR5cGVvZiBjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvcikudG9CZSgnZnVuY3Rpb24nKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IgaW1wb3J0IHZlcmlmaWVkJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ1N0YWNrIHNjcmVlbnMgY2FuIGJlIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gVGVzdGluZyBTdGFjayBzY3JlZW4gY29uZmlndXJhdGlvbicpO1xyXG5cclxuICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IoKTtcclxuICAgIGV4cGVjdChzdGFjay5TY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3Qoc3RhY2suTmF2aWdhdG9yKS50b0JlRGVmaW5lZCgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbREVCVUdfTE9HXSBTdGFjayBzY3JlZW4gY29uZmlndXJhdGlvbiB2ZXJpZmllZCcpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFJQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFBNEUsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBRzVFLElBQU1LLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBO0VBQUEsT0FBUyxJQUFBRCxXQUFBLENBQUFFLEdBQUEsRUFBQUYsV0FBQSxDQUFBRyxRQUFBLElBQUksQ0FBQztBQUFBO0FBQy9CLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFBO0VBQUEsT0FBUyxJQUFBSixXQUFBLENBQUFFLEdBQUEsRUFBQUYsV0FBQSxDQUFBRyxRQUFBLElBQUksQ0FBQztBQUFBO0FBRS9CLElBQU1FLEtBQUssR0FBRyxJQUFBQyx1Q0FBMEIsRUFBQyxDQUFDO0FBRTFDLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBQTtFQUFBLE9BQ2pCLElBQUFQLFdBQUEsQ0FBQUUsR0FBQSxFQUFDSixPQUFBLENBQUFVLG1CQUFtQjtJQUFBQyxRQUFBLEVBQ2xCLElBQUFULFdBQUEsQ0FBQVUsSUFBQSxFQUFDTCxLQUFLLENBQUNNLFNBQVM7TUFBQUYsUUFBQSxHQUNkLElBQUFULFdBQUEsQ0FBQUUsR0FBQSxFQUFDRyxLQUFLLENBQUNPLE1BQU07UUFBQ0MsSUFBSSxFQUFDLFNBQVM7UUFBQ0MsU0FBUyxFQUFFYjtNQUFZLENBQUUsQ0FBQyxFQUN2RCxJQUFBRCxXQUFBLENBQUFFLEdBQUEsRUFBQ0csS0FBSyxDQUFDTyxNQUFNO1FBQUNDLElBQUksRUFBQyxTQUFTO1FBQUNDLFNBQVMsRUFBRVY7TUFBWSxDQUFFLENBQUM7SUFBQSxDQUN4QztFQUFDLENBQ0MsQ0FBQztBQUFBLENBQ3ZCO0FBRURXLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0VBQ3hDQyxVQUFVLENBQUMsWUFBTTtJQUNmQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxtREFBbUQsQ0FBQztFQUNsRSxDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLCtDQUErQyxFQUFFLFlBQU07SUFDMURGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHFEQUFxRCxDQUFDO0lBRWxFLElBQU1KLFNBQVMsR0FBRyxJQUFBTSxtQkFBTSxFQUFDLElBQUFwQixXQUFBLENBQUFFLEdBQUEsRUFBQ0ssYUFBYSxJQUFFLENBQUMsQ0FBQztJQUMzQ2MsTUFBTSxDQUFDUCxTQUFTLENBQUMsQ0FBQ1EsVUFBVSxDQUFDLENBQUM7SUFFOUJMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHlEQUF5RCxDQUFDO0VBQ3hFLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtJQUN4REYsT0FBTyxDQUFDQyxHQUFHLENBQUMsdURBQXVELENBQUM7SUFFcEVHLE1BQU0sQ0FBQyxPQUFPZix1Q0FBMEIsQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUUxRE4sT0FBTyxDQUFDQyxHQUFHLENBQUMsd0RBQXdELENBQUM7RUFDdkUsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxZQUFNO0lBQzVDRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxnREFBZ0QsQ0FBQztJQUU3RCxJQUFNTSxLQUFLLEdBQUcsSUFBQWxCLHVDQUEwQixFQUFDLENBQUM7SUFDMUNlLE1BQU0sQ0FBQ0csS0FBSyxDQUFDWixNQUFNLENBQUMsQ0FBQ2EsV0FBVyxDQUFDLENBQUM7SUFDbENKLE1BQU0sQ0FBQ0csS0FBSyxDQUFDYixTQUFTLENBQUMsQ0FBQ2MsV0FBVyxDQUFDLENBQUM7SUFFckNSLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlEQUFpRCxDQUFDO0VBQ2hFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==