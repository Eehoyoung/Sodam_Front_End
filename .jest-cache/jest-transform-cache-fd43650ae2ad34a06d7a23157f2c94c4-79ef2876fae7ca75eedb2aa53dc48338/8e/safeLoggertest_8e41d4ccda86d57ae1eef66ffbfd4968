ad34eb4324e54b197c785168d3fefda1
"use strict";

describe('safeLogger', function () {
  beforeEach(function () {
    jest.resetModules();
  });
  test('logs regular errors via console.error and filters LogBox-related errors to warn', function () {
    jest.isolateModules(function () {
      var errorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
      var warnSpy = jest.spyOn(console, 'warn').mockImplementation(function () {});
      var logSpy = jest.spyOn(console, 'log').mockImplementation(function () {});
      var mod = require('../../utils/safeLogger');
      var logger = mod.safeLogger;
      logger.error('Regular failure occurred');
      expect(errorSpy).toHaveBeenCalled();
      warnSpy.mockClear();
      logger.error('Simulated error coming from DevTools / LogBoxStateSubscription');
      expect(warnSpy).toHaveBeenCalled();
      expect(warnSpy.mock.calls.some(function (c) {
        return String(c[0]).includes('[SafeLogger] LogBox 에러 감지:');
      })).toBe(true);
      logSpy.mockClear();
      logger.asyncStorageInfo('AsyncStorage getItem returned null for userToken (first launch)');
      expect(logSpy).toHaveBeenCalled();
      expect(logSpy.mock.calls.some(function (c) {
        return String(c[0]).includes('[SafeLogger] AsyncStorage INFO:');
      })).toBe(true);
      errorSpy.mockRestore();
      warnSpy.mockRestore();
      logSpy.mockRestore();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJqZXN0IiwicmVzZXRNb2R1bGVzIiwidGVzdCIsImlzb2xhdGVNb2R1bGVzIiwiZXJyb3JTcHkiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJ3YXJuU3B5IiwibG9nU3B5IiwibW9kIiwicmVxdWlyZSIsImxvZ2dlciIsInNhZmVMb2dnZXIiLCJlcnJvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJtb2NrQ2xlYXIiLCJtb2NrIiwiY2FsbHMiLCJzb21lIiwiYyIsIlN0cmluZyIsImluY2x1ZGVzIiwidG9CZSIsImFzeW5jU3RvcmFnZUluZm8iLCJtb2NrUmVzdG9yZSJdLCJzb3VyY2VzIjpbInNhZmVMb2dnZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBUZXN0cyBmb3Igc2FmZUxvZ2dlciB1dGlsaXR5XHJcbiAqL1xyXG5cclxuZGVzY3JpYmUoJ3NhZmVMb2dnZXInLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LnJlc2V0TW9kdWxlcygpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdsb2dzIHJlZ3VsYXIgZXJyb3JzIHZpYSBjb25zb2xlLmVycm9yIGFuZCBmaWx0ZXJzIExvZ0JveC1yZWxhdGVkIGVycm9ycyB0byB3YXJuJywgKCkgPT4ge1xyXG4gICAgamVzdC5pc29sYXRlTW9kdWxlcygoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVycm9yU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xyXG4gICAgICBjb25zdCB3YXJuU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XHJcbiAgICAgIGNvbnN0IGxvZ1NweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XHJcblxyXG4gICAgICBjb25zdCBtb2QgPSByZXF1aXJlKCcuLi8uLi91dGlscy9zYWZlTG9nZ2VyJyk7XHJcbiAgICAgIGNvbnN0IGxvZ2dlciA9IG1vZC5zYWZlTG9nZ2VyIGFzIHR5cGVvZiBtb2Quc2FmZUxvZ2dlcjtcclxuXHJcbiAgICAgIC8vIFJlZ3VsYXIgZXJyb3Igc2hvdWxkIGdvIHRvIGVycm9yXHJcbiAgICAgIGxvZ2dlci5lcnJvcignUmVndWxhciBmYWlsdXJlIG9jY3VycmVkJyk7XHJcbiAgICAgIGV4cGVjdChlcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG5cclxuICAgICAgLy8gTG9nQm94IGVycm9yIHNob3VsZCBiZSBkb3duZ3JhZGVkIHRvIHdhcm4gd2l0aCBwcmVmaXhcclxuICAgICAgd2FyblNweS5tb2NrQ2xlYXIoKTtcclxuICAgICAgbG9nZ2VyLmVycm9yKCdTaW11bGF0ZWQgZXJyb3IgY29taW5nIGZyb20gRGV2VG9vbHMgLyBMb2dCb3hTdGF0ZVN1YnNjcmlwdGlvbicpO1xyXG4gICAgICBleHBlY3Qod2FyblNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgd2FyblNweS5tb2NrLmNhbGxzLnNvbWUoYyA9PiBTdHJpbmcoY1swXSkuaW5jbHVkZXMoJ1tTYWZlTG9nZ2VyXSBMb2dCb3gg7JeQ65+sIOqwkOyngDonKSlcclxuICAgICAgKS50b0JlKHRydWUpO1xyXG5cclxuICAgICAgLy8gQXN5bmNTdG9yYWdlIGluZm8gcGF0aFxyXG4gICAgICBsb2dTcHkubW9ja0NsZWFyKCk7XHJcbiAgICAgIGxvZ2dlci5hc3luY1N0b3JhZ2VJbmZvKCdBc3luY1N0b3JhZ2UgZ2V0SXRlbSByZXR1cm5lZCBudWxsIGZvciB1c2VyVG9rZW4gKGZpcnN0IGxhdW5jaCknKTtcclxuICAgICAgZXhwZWN0KGxvZ1NweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgbG9nU3B5Lm1vY2suY2FsbHMuc29tZShjID0+IFN0cmluZyhjWzBdKS5pbmNsdWRlcygnW1NhZmVMb2dnZXJdIEFzeW5jU3RvcmFnZSBJTkZPOicpKVxyXG4gICAgICApLnRvQmUodHJ1ZSk7XHJcblxyXG4gICAgICBlcnJvclNweS5tb2NrUmVzdG9yZSgpO1xyXG4gICAgICB3YXJuU3B5Lm1vY2tSZXN0b3JlKCk7XHJcbiAgICAgIGxvZ1NweS5tb2NrUmVzdG9yZSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtFQUMzQkMsVUFBVSxDQUFDLFlBQU07SUFDZkMsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztFQUNyQixDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGlGQUFpRixFQUFFLFlBQU07SUFDNUZGLElBQUksQ0FBQ0csY0FBYyxDQUFDLFlBQU07TUFDeEIsSUFBTUMsUUFBUSxHQUFHSixJQUFJLENBQUNLLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFNLENBQUMsQ0FBQyxDQUFDO01BQzFFLElBQU1DLE9BQU8sR0FBR1IsSUFBSSxDQUFDSyxLQUFLLENBQUNDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQ0Msa0JBQWtCLENBQUMsWUFBTSxDQUFDLENBQUMsQ0FBQztNQUN4RSxJQUFNRSxNQUFNLEdBQUdULElBQUksQ0FBQ0ssS0FBSyxDQUFDQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUNDLGtCQUFrQixDQUFDLFlBQU0sQ0FBQyxDQUFDLENBQUM7TUFFdEUsSUFBTUcsR0FBRyxHQUFHQyxPQUFPLENBQUMsd0JBQXdCLENBQUM7TUFDN0MsSUFBTUMsTUFBTSxHQUFHRixHQUFHLENBQUNHLFVBQW1DO01BR3RERCxNQUFNLENBQUNFLEtBQUssQ0FBQywwQkFBMEIsQ0FBQztNQUN4Q0MsTUFBTSxDQUFDWCxRQUFRLENBQUMsQ0FBQ1ksZ0JBQWdCLENBQUMsQ0FBQztNQUduQ1IsT0FBTyxDQUFDUyxTQUFTLENBQUMsQ0FBQztNQUNuQkwsTUFBTSxDQUFDRSxLQUFLLENBQUMsZ0VBQWdFLENBQUM7TUFDOUVDLE1BQU0sQ0FBQ1AsT0FBTyxDQUFDLENBQUNRLGdCQUFnQixDQUFDLENBQUM7TUFDbENELE1BQU0sQ0FDSlAsT0FBTyxDQUFDVSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLFVBQUFDLENBQUM7UUFBQSxPQUFJQyxNQUFNLENBQUNELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsNEJBQTRCLENBQUM7TUFBQSxFQUNsRixDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFHWmYsTUFBTSxDQUFDUSxTQUFTLENBQUMsQ0FBQztNQUNsQkwsTUFBTSxDQUFDYSxnQkFBZ0IsQ0FBQyxpRUFBaUUsQ0FBQztNQUMxRlYsTUFBTSxDQUFDTixNQUFNLENBQUMsQ0FBQ08sZ0JBQWdCLENBQUMsQ0FBQztNQUNqQ0QsTUFBTSxDQUNKTixNQUFNLENBQUNTLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsVUFBQUMsQ0FBQztRQUFBLE9BQUlDLE1BQU0sQ0FBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNFLFFBQVEsQ0FBQyxpQ0FBaUMsQ0FBQztNQUFBLEVBQ3RGLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztNQUVacEIsUUFBUSxDQUFDc0IsV0FBVyxDQUFDLENBQUM7TUFDdEJsQixPQUFPLENBQUNrQixXQUFXLENBQUMsQ0FBQztNQUNyQmpCLE1BQU0sQ0FBQ2lCLFdBQVcsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==