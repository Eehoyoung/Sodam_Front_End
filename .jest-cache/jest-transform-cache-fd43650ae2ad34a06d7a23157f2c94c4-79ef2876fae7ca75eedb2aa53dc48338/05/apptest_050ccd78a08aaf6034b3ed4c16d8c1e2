89033c95f8d886da46468d12c4fecda5
"use strict";

_getJestObj().mock('../../../src/contexts/AuthContext', function () {
  return {
    AuthProvider: function AuthProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    useAuth: function useAuth() {
      return {
        user: null,
        isAuthenticated: false,
        login: jest.fn(),
        logout: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireWildcard(require("react-test-renderer"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
beforeAll(function () {
  jest.spyOn(console, 'error').mockImplementation(function () {});
  jest.spyOn(console, 'log').mockImplementation(function () {});
  jest.spyOn(console, 'warn').mockImplementation(function () {});
});
afterAll(function () {
  console.error.mockRestore == null || console.error.mockRestore();
  console.log.mockRestore == null || console.log.mockRestore();
  console.warn.mockRestore == null || console.warn.mockRestore();
});
describe('App smoke test', function () {
  test('renders without crashing with providers', function () {
    global.__DEV__ = true;
    var App = require('../../../App').default;
    var renderer;
    (0, _reactTestRenderer.act)(function () {
      renderer = _reactTestRenderer.default.create(_react.default.createElement(App));
    });
    var tree = renderer.toJSON();
    expect(tree).toBeTruthy();
    (0, _reactTestRenderer.act)(function () {
      renderer.unmount();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJBdXRoUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJ1c2VBdXRoIiwidXNlciIsImlzQXV0aGVudGljYXRlZCIsImxvZ2luIiwiamVzdCIsImZuIiwibG9nb3V0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3RUZXN0UmVuZGVyZXIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3JlcXVpcmUiLCJiZWZvcmVBbGwiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJhZnRlckFsbCIsImVycm9yIiwibW9ja1Jlc3RvcmUiLCJsb2ciLCJ3YXJuIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2xvYmFsIiwiX19ERVZfXyIsIkFwcCIsInJlbmRlcmVyIiwiYWN0IiwiVGVzdFJlbmRlcmVyIiwiY3JlYXRlIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwidHJlZSIsInRvSlNPTiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ1bm1vdW50Il0sInNvdXJjZXMiOlsiYXBwLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBUZXN0UmVuZGVyZXIsIHsgYWN0IH0gZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XHJcblxyXG4vLyBNb2NrIGhlYXZ5IEF1dGhQcm92aWRlciB0byBhdm9pZCBuZXR3b3JrL3RpbWVyIHNpZGUtZWZmZWN0cyBpbiB0ZXN0c1xyXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dCcsICgpID0+ICh7XHJcbiAgQXV0aFByb3ZpZGVyOiAoeyBjaGlsZHJlbiB9OiBhbnkpID0+IGNoaWxkcmVuLFxyXG4gIHVzZUF1dGg6ICgpID0+ICh7IHVzZXI6IG51bGwsIGlzQXV0aGVudGljYXRlZDogZmFsc2UsIGxvZ2luOiBqZXN0LmZuKCksIGxvZ291dDogamVzdC5mbigpIH0pLFxyXG59KSk7XHJcblxyXG5iZWZvcmVBbGwoKCkgPT4ge1xyXG4gIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcclxuICBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xyXG4gIGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xyXG59KTtcclxuXHJcbmFmdGVyQWxsKCgpID0+IHtcclxuICAoY29uc29sZS5lcnJvciBhcyBhbnkpLm1vY2tSZXN0b3JlPy4oKTtcclxuICAoY29uc29sZS5sb2cgYXMgYW55KS5tb2NrUmVzdG9yZT8uKCk7XHJcbiAgKGNvbnNvbGUud2FybiBhcyBhbnkpLm1vY2tSZXN0b3JlPy4oKTtcclxufSk7XHJcblxyXG5cclxuZGVzY3JpYmUoJ0FwcCBzbW9rZSB0ZXN0JywgKCkgPT4ge1xyXG4gIHRlc3QoJ3JlbmRlcnMgd2l0aG91dCBjcmFzaGluZyB3aXRoIHByb3ZpZGVycycsICgpID0+IHtcclxuICAgIChnbG9iYWwgYXMgYW55KS5fX0RFVl9fID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBBcHAgPSByZXF1aXJlKCcuLi8uLi8uLi9BcHAnKS5kZWZhdWx0O1xyXG5cclxuICAgIGxldCByZW5kZXJlcjogVGVzdFJlbmRlcmVyLlJlYWN0VGVzdFJlbmRlcmVyO1xyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgcmVuZGVyZXIgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwKSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHRyZWUgPSAocmVuZGVyZXIgYXMgYW55KS50b0pTT04oKTtcclxuICAgIGV4cGVjdCh0cmVlKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAocmVuZGVyZXIgYXMgYW55KS51bm1vdW50KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsbUNBQW1DLEVBQUU7RUFBQSxPQUFPO0lBQ3BEQyxZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBQUMsSUFBQTtNQUFBLElBQUtDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO01BQUEsT0FBWUEsUUFBUTtJQUFBO0lBQzdDQyxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQTtNQUFBLE9BQVM7UUFBRUMsSUFBSSxFQUFFLElBQUk7UUFBRUMsZUFBZSxFQUFFLEtBQUs7UUFBRUMsS0FBSyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQUVDLE1BQU0sRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBRSxDQUFDO0lBQUE7RUFDN0YsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUFDLElBQUFFLHNCQUFBLEdBQUFDLE9BQUE7QUFQSixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxrQkFBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBQXdELFNBQUFHLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSCx1QkFBQSxZQUFBQSx3QkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFB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