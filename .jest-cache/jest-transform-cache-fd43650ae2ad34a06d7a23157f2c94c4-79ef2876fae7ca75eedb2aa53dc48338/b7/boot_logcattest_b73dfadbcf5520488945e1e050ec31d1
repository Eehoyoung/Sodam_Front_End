f27a25ce0ed2c382133bdc063c2f703a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var ROOT = _path.default.resolve(__dirname, '..', '..');
var LOG_FILES = [_path.default.join(ROOT, 'Medium-Phone-Android-15_2025-08-21_011004.logcat'), _path.default.join(ROOT, 'Medium-Phone-Android-15_2025-08-21_010127.logcat')].filter(function (f) {
  return _fs.default.existsSync(f);
});
var FORBIDDEN_PATTERNS = [/Can't find ViewManager 'RNCSafeAreaProvider'/i, /RCTRNCSafeAreaProvider/i, /TurboModuleRegistry\.getEnforcing\('RNGestureHandlerModule'\) could not be found/i, /AndroidRuntime.*FATAL EXCEPTION/i];
var REQUIRED_HINTS = [/\[RECOVERY\] RNGH not available at import time:/i, /\[RECOVERY\] Using View fallback as root/i];
describe('Boot Logcat validation', function () {
  if (LOG_FILES.length === 0) {
    test('skipped (no log files present)', function () {
      expect(true).toBe(true);
    });
    return;
  }
  var _loop = function _loop(file) {
    test(`validates ${_path.default.basename(file)}`, function () {
      var content = _fs.default.readFileSync(file, 'utf8');
      FORBIDDEN_PATTERNS.forEach(function (re) {
        expect(content).not.toMatch(re);
      });
      var hasAnyHint = REQUIRED_HINTS.some(function (re) {
        return re.test(content);
      });
      expect(hasAnyHint).toBe(true);
    });
  };
  for (var file of LOG_FILES) {
    _loop(file);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wYXRoIiwiUk9PVCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiTE9HX0ZJTEVTIiwiam9pbiIsImZpbHRlciIsImYiLCJmcyIsImV4aXN0c1N5bmMiLCJGT1JCSURERU5fUEFUVEVSTlMiLCJSRVFVSVJFRF9ISU5UUyIsImRlc2NyaWJlIiwibGVuZ3RoIiwidGVzdCIsImV4cGVjdCIsInRvQmUiLCJfbG9vcCIsImZpbGUiLCJiYXNlbmFtZSIsImNvbnRlbnQiLCJyZWFkRmlsZVN5bmMiLCJmb3JFYWNoIiwicmUiLCJub3QiLCJ0b01hdGNoIiwiaGFzQW55SGludCIsInNvbWUiXSwic291cmNlcyI6WyJib290X2xvZ2NhdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuY29uc3QgUk9PVCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicpO1xyXG5jb25zdCBMT0dfRklMRVMgPSBbXHJcbiAgcGF0aC5qb2luKFJPT1QsICdNZWRpdW0tUGhvbmUtQW5kcm9pZC0xNV8yMDI1LTA4LTIxXzAxMTAwNC5sb2djYXQnKSxcclxuICBwYXRoLmpvaW4oUk9PVCwgJ01lZGl1bS1QaG9uZS1BbmRyb2lkLTE1XzIwMjUtMDgtMjFfMDEwMTI3LmxvZ2NhdCcpLFxyXG5dLmZpbHRlcihmID0+IGZzLmV4aXN0c1N5bmMoZikpO1xyXG5cclxuY29uc3QgRk9SQklEREVOX1BBVFRFUk5TID0gW1xyXG4gIC9DYW4ndCBmaW5kIFZpZXdNYW5hZ2VyICdSTkNTYWZlQXJlYVByb3ZpZGVyJy9pLFxyXG4gIC9SQ1RSTkNTYWZlQXJlYVByb3ZpZGVyL2ksXHJcbiAgL1R1cmJvTW9kdWxlUmVnaXN0cnlcXC5nZXRFbmZvcmNpbmdcXCgnUk5HZXN0dXJlSGFuZGxlck1vZHVsZSdcXCkgY291bGQgbm90IGJlIGZvdW5kL2ksXHJcbiAgL0FuZHJvaWRSdW50aW1lLipGQVRBTCBFWENFUFRJT04vaSxcclxuXTtcclxuXHJcbmNvbnN0IFJFUVVJUkVEX0hJTlRTID0gW1xyXG4gIC9cXFtSRUNPVkVSWVxcXSBSTkdIIG5vdCBhdmFpbGFibGUgYXQgaW1wb3J0IHRpbWU6L2ksXHJcbiAgL1xcW1JFQ09WRVJZXFxdIFVzaW5nIFZpZXcgZmFsbGJhY2sgYXMgcm9vdC9pLFxyXG5dO1xyXG5cclxuZGVzY3JpYmUoJ0Jvb3QgTG9nY2F0IHZhbGlkYXRpb24nLCAoKSA9PiB7XHJcbiAgaWYgKExPR19GSUxFUy5sZW5ndGggPT09IDApIHtcclxuICAgIHRlc3QoJ3NraXBwZWQgKG5vIGxvZyBmaWxlcyBwcmVzZW50KScsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGZvciAoY29uc3QgZmlsZSBvZiBMT0dfRklMRVMpIHtcclxuICAgIHRlc3QoYHZhbGlkYXRlcyAke3BhdGguYmFzZW5hbWUoZmlsZSl9YCwgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGY4Jyk7XHJcblxyXG4gICAgICBGT1JCSURERU5fUEFUVEVSTlMuZm9yRWFjaChyZSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGNvbnRlbnQpLm5vdC50b01hdGNoKHJlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBBdCBsZWFzdCBvbmUgb2YgdGhlIGhpbnRzIHNob3VsZCBhcHBlYXIgdG8gY29uZmlybSBvdXIgcmVjb3ZlcnkgcGF0aCBleGVjdXRlZFxyXG4gICAgICBjb25zdCBoYXNBbnlIaW50ID0gUkVRVUlSRURfSElOVFMuc29tZShyZSA9PiByZS50ZXN0KGNvbnRlbnQpKTtcclxuICAgICAgZXhwZWN0KGhhc0FueUhpbnQpLnRvQmUodHJ1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUFBLEdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQU1FLElBQUksR0FBR0MsYUFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0FBQ2hELElBQU1DLFNBQVMsR0FBRyxDQUNoQkgsYUFBSSxDQUFDSSxJQUFJLENBQUNMLElBQUksRUFBRSxrREFBa0QsQ0FBQyxFQUNuRUMsYUFBSSxDQUFDSSxJQUFJLENBQUNMLElBQUksRUFBRSxrREFBa0QsQ0FBQyxDQUNwRSxDQUFDTSxNQUFNLENBQUMsVUFBQUMsQ0FBQztFQUFBLE9BQUlDLFdBQUUsQ0FBQ0MsVUFBVSxDQUFDRixDQUFDLENBQUM7QUFBQSxFQUFDO0FBRS9CLElBQU1HLGtCQUFrQixHQUFHLENBQ3pCLCtDQUErQyxFQUMvQyx5QkFBeUIsRUFDekIsbUZBQW1GLEVBQ25GLGtDQUFrQyxDQUNuQztBQUVELElBQU1DLGNBQWMsR0FBRyxDQUNyQixrREFBa0QsRUFDbEQsMkNBQTJDLENBQzVDO0FBRURDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxZQUFNO0VBQ3ZDLElBQUlSLFNBQVMsQ0FBQ1MsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUMxQkMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07TUFDM0NDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDLENBQUM7SUFDRjtFQUNGO0VBQUMsSUFBQUMsS0FBQSxZQUFBQSxNQUFBQyxJQUFBLEVBRTZCO0lBQzVCSixJQUFJLENBQUMsYUFBYWIsYUFBSSxDQUFDa0IsUUFBUSxDQUFDRCxJQUFJLENBQUMsRUFBRSxFQUFFLFlBQU07TUFDN0MsSUFBTUUsT0FBTyxHQUFHWixXQUFFLENBQUNhLFlBQVksQ0FBQ0gsSUFBSSxFQUFFLE1BQU0sQ0FBQztNQUU3Q1Isa0JBQWtCLENBQUNZLE9BQU8sQ0FBQyxVQUFBQyxFQUFFLEVBQUk7UUFDL0JSLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLENBQUNJLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDRixFQUFFLENBQUM7TUFDakMsQ0FBQyxDQUFDO01BR0YsSUFBTUcsVUFBVSxHQUFHZixjQUFjLENBQUNnQixJQUFJLENBQUMsVUFBQUosRUFBRTtRQUFBLE9BQUlBLEVBQUUsQ0FBQ1QsSUFBSSxDQUFDTSxPQUFPLENBQUM7TUFBQSxFQUFDO01BQzlETCxNQUFNLENBQUNXLFVBQVUsQ0FBQyxDQUFDVixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUMsQ0FBQztFQUNKLENBQUM7RUFaRCxLQUFLLElBQU1FLElBQUksSUFBSWQsU0FBUztJQUFBYSxLQUFBLENBQUFDLElBQUE7RUFBQTtBQWE5QixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=