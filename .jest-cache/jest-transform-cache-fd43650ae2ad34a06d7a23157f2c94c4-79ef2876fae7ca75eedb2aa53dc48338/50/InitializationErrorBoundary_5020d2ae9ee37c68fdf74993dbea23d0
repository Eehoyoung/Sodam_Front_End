826190bb3f61775eca56c62f7233d911
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InitializationErrorBoundary = void 0;
exports.withInitializationErrorBoundary = withInitializationErrorBoundary;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _safeLogger = require("../utils/safeLogger");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var InitializationErrorBoundary = exports.InitializationErrorBoundary = function (_Component) {
  function InitializationErrorBoundary(props) {
    var _this;
    (0, _classCallCheck2.default)(this, InitializationErrorBoundary);
    _this = _callSuper(this, InitializationErrorBoundary, [props]);
    _this.state = {
      hasError: false
    };
    return _this;
  }
  (0, _inherits2.default)(InitializationErrorBoundary, _Component);
  return (0, _createClass2.default)(InitializationErrorBoundary, [{
    key: "isTimingIssue",
    value: function isTimingIssue(error) {
      var _error$message, _error$name;
      var errorMessage = ((_error$message = error.message) == null ? void 0 : _error$message.toLowerCase()) || '';
      var errorName = ((_error$name = error.name) == null ? void 0 : _error$name.toLowerCase()) || '';
      var timingPatterns = ['reactnocrashsoftexception', 'onwindowfocuschange', 'context is not ready', 'tried to access', 'while context is not ready', 'timing', 'initialization'];
      return timingPatterns.some(function (pattern) {
        return errorMessage.includes(pattern) || errorName.includes(pattern);
      });
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      if (this.isTimingIssue(error)) {
        this.handleTimingIssue(error, errorInfo);
      } else {
        this.handleRegularError(error, errorInfo);
      }
    }
  }, {
    key: "handleTimingIssue",
    value: function handleTimingIssue(error, errorInfo) {
      console.warn('[TIMING_ISSUE] ReactNoCrashSoftException detected:', error.message);
      _safeLogger.safeLogger.warn('React Native timing issue detected (non-critical)', {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        },
        errorInfo: {
          componentStack: errorInfo.componentStack
        },
        timestamp: new Date().toISOString(),
        severity: 'warning',
        type: 'timing_issue',
        impact: 'none',
        userVisible: false
      });
      if (this.props.onTimingIssue) {
        this.props.onTimingIssue(error, errorInfo);
      }
      if (__DEV__) {
        console.group('[TIMING_ISSUE] Detailed Timing Issue Information');
        console.warn('Timing Issue:', error);
        console.warn('Component Stack:', errorInfo.componentStack);
        console.warn('Impact: None - App continues normally');
        console.warn('Action Required: Monitor frequency, optimize if needed');
        console.groupEnd();
      }
    }
  }, {
    key: "handleRegularError",
    value: function handleRegularError(error, errorInfo) {
      console.error('[INIT_ERROR] Critical initialization error:', error);
      _safeLogger.safeLogger.error('Critical initialization error', {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack
        },
        errorInfo: {
          componentStack: errorInfo.componentStack
        },
        timestamp: new Date().toISOString(),
        severity: 'error',
        type: 'initialization_error',
        impact: 'high',
        userVisible: true
      });
      this.setState({
        hasError: true,
        error: error
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.hasError && this.state.error && !this.isTimingIssue(this.state.error)) {
        return (0, _jsxRuntime.jsxs)("div", {
          style: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            padding: 20,
            backgroundColor: '#f8f9fa'
          },
          children: [(0, _jsxRuntime.jsx)("h2", {
            children: "Initialization Error"
          }), (0, _jsxRuntime.jsx)("p", {
            children: "A critical error occurred during app initialization."
          }), __DEV__ && (0, _jsxRuntime.jsx)("pre", {
            style: {
              backgroundColor: '#f8d7da',
              padding: 16,
              borderRadius: 8,
              fontSize: 12,
              maxWidth: '100%',
              overflow: 'auto'
            },
            children: this.state.error.message
          })]
        });
      }
      return this.props.children;
    }
  }], [{
    key: "getDerivedStateFromError",
    value: function getDerivedStateFromError(error) {
      return {
        hasError: false
      };
    }
  }]);
}(_react.Component);
function withInitializationErrorBoundary(Component, errorBoundaryProps) {
  var WrappedComponent = function WrappedComponent(props) {
    return (0, _jsxRuntime.jsx)(InitializationErrorBoundary, Object.assign({}, errorBoundaryProps, {
      children: (0, _jsxRuntime.jsx)(Component, Object.assign({}, props))
    }));
  };
  WrappedComponent.displayName = `withInitializationErrorBoundary(${Component.displayName || Component.name})`;
  return WrappedComponent;
}
var _default = exports.default = InitializationErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,