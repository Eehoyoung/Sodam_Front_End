5207614c3a60b61f1b804640c3362922
"use strict";

_getJestObj().mock('../hooks/useStorage', function () {
  return {
    useStorage: function useStorage() {
      return {
        getItem: jest.fn(),
        setItem: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useFirstLaunch = require("../hooks/useFirstLaunch");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useFirstLaunch', function () {
  var mockGetItem;
  var mockSetItem;
  beforeEach(function () {
    jest.clearAllMocks();
    var _require = require('../hooks/useStorage'),
      useStorage = _require.useStorage;
    var storage = useStorage();
    mockGetItem = storage.getItem;
    mockSetItem = storage.setItem;
  });
  test('should initialize with default state', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook.result;
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.loading).toBe(true);
    expect(typeof result.current.checkFirstLaunch).toBe('function');
    expect(typeof result.current.setFirstLaunchComplete).toBe('function');
  });
  test('should check first launch when no previous launch detected', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue(null);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.checkFirstLaunch();
    }));
    expect(mockGetItem).toHaveBeenCalledWith('hasLaunched');
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.loading).toBe(false);
  }));
  test('should check first launch when previous launch detected', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue('true');
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.checkFirstLaunch();
    }));
    expect(mockGetItem).toHaveBeenCalledWith('hasLaunched');
    expect(result.current.isFirstLaunch).toBe(false);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle checkFirstLaunch error gracefully', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockRejectedValue(new Error('Storage error'));
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.checkFirstLaunch();
    }));
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.loading).toBe(false);
  }));
  test('should set first launch complete successfully', (0, _asyncToGenerator2.default)(function* () {
    mockSetItem.mockResolvedValue(undefined);
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook5.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.setFirstLaunchComplete();
    }));
    expect(mockSetItem).toHaveBeenCalledWith('hasLaunched', 'true');
    expect(result.current.isFirstLaunch).toBe(false);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle setFirstLaunchComplete error gracefully', (0, _asyncToGenerator2.default)(function* () {
    mockSetItem.mockRejectedValue(new Error('Storage error'));
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.setFirstLaunchComplete();
    }));
    expect(mockSetItem).toHaveBeenCalledWith('hasLaunched', 'true');
    expect(result.current.loading).toBe(false);
  }));
  test('should show loading state during operations', (0, _asyncToGenerator2.default)(function* () {
    var resolveGetItem;
    var getItemPromise = new Promise(function (resolve) {
      resolveGetItem = resolve;
    });
    mockGetItem.mockReturnValue(getItemPromise);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook7.result;
    (0, _reactNative.act)(function () {
      result.current.checkFirstLaunch();
    });
    expect(result.current.loading).toBe(true);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      resolveGetItem(null);
      yield getItemPromise;
    }));
    expect(result.current.loading).toBe(false);
  }));
  test('should provide consistent interface', function () {
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook8.result;
    expect(result.current).toHaveProperty('isFirstLaunch');
    expect(result.current).toHaveProperty('loading');
    expect(result.current).toHaveProperty('checkFirstLaunch');
    expect(result.current).toHaveProperty('setFirstLaunchComplete');
  });
  test('should auto-initialize when hook is first used', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue('true');
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook9.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.isFirstLaunch).toBe(true);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(mockGetItem).toHaveBeenCalledWith('hasLaunched');
    expect(result.current.isFirstLaunch).toBe(false);
    expect(result.current.loading).toBe(false);
  }));
  test('should handle auto-initialization error gracefully', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockRejectedValue(new Error('Storage error'));
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook0.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(result.current.isFirstLaunch).toBe(true);
    expect(result.current.loading).toBe(false);
  }));
  test('should prevent infinite loading with timeout', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    mockGetItem.mockImplementation(function () {
      return new Promise(function () {});
    });
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook1.result;
    expect(result.current.loading).toBe(true);
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(2000);
    });
    expect(result.current.loading).toBe(false);
    expect(result.current.isFirstLaunch).toBe(true);
    jest.useRealTimers();
  }));
  test('should not re-initialize if already initialized', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue(null);
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useFirstLaunch.useFirstLaunch)();
      }),
      result = _renderHook10.result,
      rerender = _renderHook10.rerender;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(mockGetItem).toHaveBeenCalledTimes(1);
    rerender();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
    }));
    expect(mockGetItem).toHaveBeenCalledTimes(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,