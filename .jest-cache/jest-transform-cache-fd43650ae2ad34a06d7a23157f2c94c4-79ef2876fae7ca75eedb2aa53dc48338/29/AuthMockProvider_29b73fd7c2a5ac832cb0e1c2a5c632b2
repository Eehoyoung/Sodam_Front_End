8583ffee085f86658788b35b21876e73
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuthMock = exports.default = exports.AuthMockProvider = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var defaultValue = {
  isAuthenticated: false,
  isLoading: false,
  signIn: function signIn() {},
  signOut: function signOut() {}
};
var AuthMockContext = (0, _react.createContext)(defaultValue);
var useAuthMock = exports.useAuthMock = function useAuthMock() {
  var ctx = (0, _react.useContext)(AuthMockContext);
  return ctx != null ? ctx : defaultValue;
};
var AuthMockProvider = exports.AuthMockProvider = function AuthMockProvider(_ref) {
  var children = _ref.children,
    _ref$initialAuthentic = _ref.initialAuthenticated,
    initialAuthenticated = _ref$initialAuthentic === void 0 ? false : _ref$initialAuthentic;
  var _useState = (0, _react.useState)(initialAuthenticated),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isAuthenticated = _useState2[0],
    setIsAuthenticated = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var signIn = function signIn() {
    setIsLoading(true);
    try {
      setIsAuthenticated(true);
    } finally {
      setIsLoading(false);
    }
  };
  var signOut = function signOut() {
    setIsLoading(true);
    try {
      setIsAuthenticated(false);
    } finally {
      setIsLoading(false);
    }
  };
  var value = (0, _react.useMemo)(function () {
    return {
      isAuthenticated: isAuthenticated,
      isLoading: isLoading,
      signIn: signIn,
      signOut: signOut
    };
  }, [isAuthenticated, isLoading]);
  return (0, _jsxRuntime.jsx)(AuthMockContext.Provider, {
    value: value,
    children: children
  });
};
var _default = exports.default = AuthMockProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfanN4UnVudGltZSIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmYXVsdFZhbHVlIiwiaXNBdXRoZW50aWNhdGVkIiwiaXNMb2FkaW5nIiwic2lnbkluIiwic2lnbk91dCIsIkF1dGhNb2NrQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VBdXRoTW9jayIsImV4cG9ydHMiLCJjdHgiLCJ1c2VDb250ZXh0IiwiQXV0aE1vY2tQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIl9yZWYkaW5pdGlhbEF1dGhlbnRpYyIsImluaXRpYWxBdXRoZW50aWNhdGVkIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwic2V0SXNBdXRoZW50aWNhdGVkIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJzZXRJc0xvYWRpbmciLCJ2YWx1ZSIsInVzZU1lbW8iLCJqc3giLCJQcm92aWRlciIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQXV0aE1vY2tQcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7Y3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBBdXRoTW9ja1N0YXRlIHtcclxuICAgIGlzQXV0aGVudGljYXRlZDogYm9vbGVhbjtcclxuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcclxuICAgIHNpZ25JbjogKCkgPT4gUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XHJcbiAgICBzaWduT3V0OiAoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdFZhbHVlOiBBdXRoTW9ja1N0YXRlID0ge1xyXG4gICAgaXNBdXRoZW50aWNhdGVkOiBmYWxzZSxcclxuICAgIGlzTG9hZGluZzogZmFsc2UsXHJcbiAgICBzaWduSW46ICgpID0+IHtcclxuICAgIH0sXHJcbiAgICBzaWduT3V0OiAoKSA9PiB7XHJcbiAgICB9LFxyXG59O1xyXG5cclxuY29uc3QgQXV0aE1vY2tDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxBdXRoTW9ja1N0YXRlPihkZWZhdWx0VmFsdWUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUF1dGhNb2NrID0gKCk6IEF1dGhNb2NrU3RhdGUgPT4ge1xyXG4gICAgY29uc3QgY3R4ID0gdXNlQ29udGV4dChBdXRoTW9ja0NvbnRleHQpO1xyXG4gICAgcmV0dXJuIGN0eCA/PyBkZWZhdWx0VmFsdWU7XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcclxuICAgIGluaXRpYWxBdXRoZW50aWNhdGVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEF1dGhNb2NrUHJvdmlkZXI6IHNpZGUtZWZmZWN0LWZyZWUgYXV0aGVudGljYXRpb24gY29udGV4dCBmb3IgZWFybHkgaXRlcmF0aW9ucy5cclxuICogLSBObyBzdG9yYWdlLCBubyBuZXR3b3JrLCBubyBuYXRpdmUgbW9kdWxlc1xyXG4gKiAtIFByb3ZpZGVzIGluLW1lbW9yeSBpc0F1dGhlbnRpY2F0ZWQgc3RhdGUgYW5kIHNpbXBsZSBzaWduSW4vc2lnbk91dFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEF1dGhNb2NrUHJvdmlkZXI6IFJlYWN0LkZDPFByb3BzPiA9ICh7Y2hpbGRyZW4sIGluaXRpYWxBdXRoZW50aWNhdGVkID0gZmFsc2V9KSA9PiB7XHJcbiAgICBjb25zdCBbaXNBdXRoZW50aWNhdGVkLCBzZXRJc0F1dGhlbnRpY2F0ZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oaW5pdGlhbEF1dGhlbnRpY2F0ZWQpO1xyXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgICBjb25zdCBzaWduSW4gPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gS2VlcCBzeW5jaHJvbm91cyBhbmQgc2FmZTsgZXh0ZW5kIGxhdGVyIGlmIG5lZWRlZFxyXG4gICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZXRJc0F1dGhlbnRpY2F0ZWQodHJ1ZSk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHNpZ25PdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHNldElzQXV0aGVudGljYXRlZChmYWxzZSk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHZhbHVlID0gdXNlTWVtbzxBdXRoTW9ja1N0YXRlPigoKSA9PiAoe1xyXG4gICAgICAgIGlzQXV0aGVudGljYXRlZCxcclxuICAgICAgICBpc0xvYWRpbmcsXHJcbiAgICAgICAgc2lnbkluLFxyXG4gICAgICAgIHNpZ25PdXQsXHJcbiAgICB9KSwgW2lzQXV0aGVudGljYXRlZCwgaXNMb2FkaW5nXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8QXV0aE1vY2tDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XHJcbiAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L0F1dGhNb2NrQ29udGV4dC5Qcm92aWRlcj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBdXRoTW9ja1Byb3ZpZGVyO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQTBFLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUFBLFNBQUFELHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBTCx1QkFBQSxZQUFBQSx3QkFBQUcsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxD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