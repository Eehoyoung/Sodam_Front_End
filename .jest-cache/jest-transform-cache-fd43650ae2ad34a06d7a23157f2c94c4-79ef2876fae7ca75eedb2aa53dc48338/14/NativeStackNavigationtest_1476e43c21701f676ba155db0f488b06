df2449a75e43dcf76ccf3ea8b67a47e5
"use strict";

_getJestObj().mock('../features/welcome/screens/HybridMainScreen', function () {
  return function MockHybridMainScreen() {
    return null;
  };
});
_getJestObj().mock('../features/auth/screens/LoginScreen', function () {
  return function MockLoginScreen() {
    return null;
  };
});
_getJestObj().mock('../features/auth/screens/SignupScreen', function () {
  return function MockSignupScreen() {
    return null;
  };
});
_getJestObj().mock('../features/home/screens/HomeScreen', function () {
  return function MockHomeScreen() {
    return null;
  };
});
_getJestObj().mock('../common/components/layout/Header', function () {
  return function MockHeader() {
    return null;
  };
});
_getJestObj().mock('../features/subscription/screens/SubscribeScreen', function () {
  return function MockSubscribeScreen() {
    return null;
  };
});
_getJestObj().mock('../features/qna/screens/QnAScreen', function () {
  return function MockQnAScreen() {
    return null;
  };
});
_getJestObj().mock('../features/info/screens/LaborInfoDetailScreen', function () {
  return function MockLaborInfoDetailScreen() {
    return null;
  };
});
_getJestObj().mock('../features/info/screens/PolicyDetailScreen', function () {
  return function MockPolicyDetailScreen() {
    return null;
  };
});
_getJestObj().mock('../features/info/screens/TaxInfoDetailScreen', function () {
  return function MockTaxInfoDetailScreen() {
    return null;
  };
});
_getJestObj().mock('../features/info/screens/TipsDetailScreen', function () {
  return function MockTipsDetailScreen() {
    return null;
  };
});
_getJestObj().mock('../features/myPage/screens/EmployeeMyPageScreen', function () {
  return function MockEmployeeMyPageScreen() {
    return null;
  };
});
_getJestObj().mock('../features/myPage/screens/MasterMyPageScreen', function () {
  return function MockMasterMyPageScreen() {
    return null;
  };
});
_getJestObj().mock('../features/myPage/screens/ManagerMyPageScreen', function () {
  return function MockManagerMyPageScreen() {
    return null;
  };
});
_getJestObj().mock('../features/myPage/screens/UserMyPageScreen', function () {
  return function MockUserMyPageScreen() {
    return null;
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _AppNavigator = _interopRequireDefault(require("../navigation/AppNavigator"));
var _AuthNavigator = _interopRequireDefault(require("../navigation/AuthNavigator"));
var _HomeNavigator = _interopRequireDefault(require("../navigation/HomeNavigator"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Native Stack Navigation Migration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('AppNavigator', function () {
    it('should render without crashing after RNGH removal', function () {
      console.log('[DEBUG_LOG] Testing AppNavigator rendering');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppNavigator.default, {
          appReady: true
        }));
      }).not.toThrow();
      console.log('[DEBUG_LOG] AppNavigator rendered successfully');
    });
    it('should handle appReady prop correctly', function () {
      console.log('[DEBUG_LOG] Testing AppNavigator with appReady=false');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppNavigator.default, {
          appReady: false
        }));
      }).not.toThrow();
      console.log('[DEBUG_LOG] AppNavigator handled appReady=false correctly');
    });
  });
  describe('AuthNavigator', function () {
    it('should render without crashing with Native Stack', function () {
      console.log('[DEBUG_LOG] Testing AuthNavigator rendering');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthNavigator.default, {}));
      }).not.toThrow();
      console.log('[DEBUG_LOG] AuthNavigator rendered successfully');
    });
    it('should maintain proper type definitions', function () {
      console.log('[DEBUG_LOG] Testing AuthNavigator type definitions');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthNavigator.default, {}));
      }).not.toThrow();
      console.log('[DEBUG_LOG] AuthNavigator type definitions are correct');
    });
  });
  describe('HomeNavigator', function () {
    it('should render without crashing with Native Stack', function () {
      console.log('[DEBUG_LOG] Testing HomeNavigator rendering');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeNavigator.default, {}));
      }).not.toThrow();
      console.log('[DEBUG_LOG] HomeNavigator rendered successfully');
    });
    it('should handle complex screen configuration', function () {
      console.log('[DEBUG_LOG] Testing HomeNavigator complex configuration');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeNavigator.default, {}));
      }).not.toThrow();
      console.log('[DEBUG_LOG] HomeNavigator handled complex configuration correctly');
    });
  });
  describe('Navigation Integration', function () {
    it('should work without react-native-gesture-handler dependency', function () {
      console.log('[DEBUG_LOG] Testing navigation without RNGH');
      expect(function () {
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppNavigator.default, {}));
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthNavigator.default, {}));
        (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeNavigator.default, {}));
      }).not.toThrow();
      console.log('[DEBUG_LOG] All navigators work without RNGH dependency');
    });
    it('should maintain proper navigation structure', function () {
      console.log('[DEBUG_LOG] Testing navigation structure integrity');
      var appNav = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppNavigator.default, {}));
      expect(appNav).toBeDefined();
      var authNav = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthNavigator.default, {}));
      expect(authNav).toBeDefined();
      var homeNav = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeNavigator.default, {}));
      expect(homeNav).toBeDefined();
      console.log('[DEBUG_LOG] Navigation structure integrity verified');
    });
  });
  describe('Performance Tests', function () {
    it('should render navigators within acceptable time', function () {
      console.log('[DEBUG_LOG] Testing navigation performance');
      var startTime = Date.now();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AppNavigator.default, {}));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthNavigator.default, {}));
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeNavigator.default, {}));
      var endTime = Date.now();
      var renderTime = endTime - startTime;
      expect(renderTime).toBeLessThan(1000);
      console.log(`[DEBUG_LOG] Navigation rendered in ${renderTime}ms`);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,