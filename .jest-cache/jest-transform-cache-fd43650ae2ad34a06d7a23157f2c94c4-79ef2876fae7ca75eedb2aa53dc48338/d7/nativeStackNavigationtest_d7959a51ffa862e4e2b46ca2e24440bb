681e79ceb941c5d344bc57554983a194
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _native = require("@react-navigation/native");
var _nativeStack = require("@react-navigation/native-stack");
var _jsxRuntime = require("react/jsx-runtime");
var TestScreen1 = function TestScreen1() {
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
};
var TestScreen2 = function TestScreen2() {
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
};
var Stack = (0, _nativeStack.createNativeStackNavigator)();
var TestNavigator = function TestNavigator() {
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsxs)(Stack.Navigator, {
      children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "Screen1",
        component: TestScreen1
      }), (0, _jsxRuntime.jsx)(Stack.Screen, {
        name: "Screen2",
        component: TestScreen2
      })]
    })
  });
};
describe('Native Stack Navigation', function () {
  beforeEach(function () {
    console.log('[DEBUG_LOG] Starting Native Stack Navigation test');
  });
  test('creates Native Stack Navigator without errors', function () {
    console.log('[DEBUG_LOG] Testing Native Stack Navigator creation');
    var component = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(TestNavigator, {}));
    expect(component).toBeTruthy();
    console.log('[DEBUG_LOG] Native Stack Navigator created successfully');
  });
  test('Native Stack Navigator is properly imported', function () {
    console.log('[DEBUG_LOG] Testing createNativeStackNavigator import');
    expect(typeof _nativeStack.createNativeStackNavigator).toBe('function');
    console.log('[DEBUG_LOG] createNativeStackNavigator import verified');
  });
  test('Stack screens can be configured', function () {
    console.log('[DEBUG_LOG] Testing Stack screen configuration');
    var stack = (0, _nativeStack.createNativeStackNavigator)();
    expect(stack.Screen).toBeDefined();
    expect(stack.Navigator).toBeDefined();
    console.log('[DEBUG_LOG] Stack screen configuration verified');
  });
  test('verifies RNGH dependency removal', function () {
    console.log('[DEBUG_LOG] Testing RNGH dependency removal');
    expect(function () {
      require('@react-navigation/stack');
    }).toThrow();
    console.log('[DEBUG_LOG] RNGH dependency removal verified');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdFRlc3RSZW5kZXJlciIsIl9uYXRpdmUiLCJfbmF0aXZlU3RhY2siLCJfanN4UnVudGltZSIsIlRlc3RTY3JlZW4xIiwianN4IiwiRnJhZ21lbnQiLCJUZXN0U2NyZWVuMiIsIlN0YWNrIiwiY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IiLCJUZXN0TmF2aWdhdG9yIiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4cyIsIk5hdmlnYXRvciIsIlNjcmVlbiIsIm5hbWUiLCJjb21wb25lbnQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjb25zb2xlIiwibG9nIiwidGVzdCIsIlJlYWN0VGVzdFJlbmRlcmVyIiwiY3JlYXRlIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInRvQmUiLCJzdGFjayIsInRvQmVEZWZpbmVkIiwidG9UaHJvdyJdLCJzb3VyY2VzIjpbIm5hdGl2ZVN0YWNrTmF2aWdhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24gVGVzdHNcclxuICogVmVyaWZpZXMgTmF0aXZlIFN0YWNrIE5hdmlnYXRvciBmdW5jdGlvbmFsaXR5IGFmdGVyIFJOR0ggbWlncmF0aW9uXHJcbiAqL1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RUZXN0UmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25Db250YWluZXIgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgeyBjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvciB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcblxyXG4vLyBNb2NrIGNvbXBvbmVudHMgZm9yIHRlc3RpbmdcclxuY29uc3QgVGVzdFNjcmVlbjEgPSAoKSA9PiA8PjwvPjtcclxuY29uc3QgVGVzdFNjcmVlbjIgPSAoKSA9PiA8PjwvPjtcclxuXHJcbmNvbnN0IFN0YWNrID0gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IoKTtcclxuXHJcbmNvbnN0IFRlc3ROYXZpZ2F0b3IgPSAoKSA9PiAoXHJcbiAgPE5hdmlnYXRpb25Db250YWluZXI+XHJcbiAgICA8U3RhY2suTmF2aWdhdG9yPlxyXG4gICAgICA8U3RhY2suU2NyZWVuIG5hbWU9XCJTY3JlZW4xXCIgY29tcG9uZW50PXtUZXN0U2NyZWVuMX0gLz5cclxuICAgICAgPFN0YWNrLlNjcmVlbiBuYW1lPVwiU2NyZWVuMlwiIGNvbXBvbmVudD17VGVzdFNjcmVlbjJ9IC8+XHJcbiAgICA8L1N0YWNrLk5hdmlnYXRvcj5cclxuICA8L05hdmlnYXRpb25Db250YWluZXI+XHJcbik7XHJcblxyXG5kZXNjcmliZSgnTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24nLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gU3RhcnRpbmcgTmF0aXZlIFN0YWNrIE5hdmlnYXRpb24gdGVzdCcpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdjcmVhdGVzIE5hdGl2ZSBTdGFjayBOYXZpZ2F0b3Igd2l0aG91dCBlcnJvcnMnLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gVGVzdGluZyBOYXRpdmUgU3RhY2sgTmF2aWdhdG9yIGNyZWF0aW9uJyk7XHJcblxyXG4gICAgY29uc3QgY29tcG9uZW50ID0gUmVhY3RUZXN0UmVuZGVyZXIuY3JlYXRlKDxUZXN0TmF2aWdhdG9yIC8+KTtcclxuICAgIGV4cGVjdChjb21wb25lbnQpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gTmF0aXZlIFN0YWNrIE5hdmlnYXRvciBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdOYXRpdmUgU3RhY2sgTmF2aWdhdG9yIGlzIHByb3Blcmx5IGltcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tERUJVR19MT0ddIFRlc3RpbmcgY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IgaW1wb3J0Jyk7XHJcblxyXG4gICAgZXhwZWN0KHR5cGVvZiBjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvcikudG9CZSgnZnVuY3Rpb24nKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IgaW1wb3J0IHZlcmlmaWVkJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ1N0YWNrIHNjcmVlbnMgY2FuIGJlIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0RFQlVHX0xPR10gVGVzdGluZyBTdGFjayBzY3JlZW4gY29uZmlndXJhdGlvbicpO1xyXG5cclxuICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3IoKTtcclxuICAgIGV4cGVjdChzdGFjay5TY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3Qoc3RhY2suTmF2aWdhdG9yKS50b0JlRGVmaW5lZCgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbREVCVUdfTE9HXSBTdGFjayBzY3JlZW4gY29uZmlndXJhdGlvbiB2ZXJpZmllZCcpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCd2ZXJpZmllcyBSTkdIIGRlcGVuZGVuY3kgcmVtb3ZhbCcsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbREVCVUdfTE9HXSBUZXN0aW5nIFJOR0ggZGVwZW5kZW5jeSByZW1vdmFsJyk7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoYXQgd2UgY2Fubm90IGltcG9ydCBmcm9tIHJlYWN0LW5hdmlnYXRpb24vc3RhY2tcclxuICAgIGV4cGVjdCgoKSA9PiB7XHJcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBiZSBhdmFpbGFibGUgc2luY2Ugd2UgcmVtb3ZlZCB0aGUgZGVwZW5kZW5jeVxyXG4gICAgICByZXF1aXJlKCdAcmVhY3QtbmF2aWdhdGlvbi9zdGFjaycpO1xyXG4gICAgfSkudG9UaHJvdygpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbREVCVUdfTE9HXSBSTkdIIGRlcGVuZGVuY3kgcmVtb3ZhbCB2ZXJpZmllZCcpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFJQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsWUFBQSxHQUFBSCxPQUFBO0FBQTRFLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUc1RSxJQUFNSyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQTtFQUFBLE9BQVMsSUFBQUQsV0FBQSxDQUFBRSxHQUFBLEVBQUFGLFdBQUEsQ0FBQUcsUUFBQSxJQUFJLENBQUM7QUFBQTtBQUMvQixJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQTtFQUFBLE9BQVMsSUFBQUosV0FBQSxDQUFBRSxHQUFBLEVBQUFGLFdBQUEsQ0FBQUcsUUFBQSxJQUFJLENBQUM7QUFBQTtBQUUvQixJQUFNRSxLQUFLLEdBQUcsSUFBQUMsdUNBQTBCLEVBQUMsQ0FBQztBQUUxQyxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUE7RUFBQSxPQUNqQixJQUFBUCxXQUFBLENBQUFFLEdBQUEsRUFBQ0osT0FBQSxDQUFBVSxtQkFBbUI7SUFBQUMsUUFBQSxFQUNsQixJQUFBVCxXQUFBLENBQUFVLElBQUEsRUFBQ0wsS0FBSyxDQUFDTSxTQUFTO01BQUFGLFFBQUEsR0FDZCxJQUFBVCxXQUFBLENBQUFFLEdBQUEsRUFBQ0csS0FBSyxDQUFDTyxNQUFNO1FBQUNDLElBQUksRUFBQyxTQUFTO1FBQUNDLFNBQVMsRUFBRWI7TUFBWSxDQUFFLENBQUMsRUFDdkQsSUFBQUQsV0FBQSxDQUFBRSxHQUFBLEVBQUNHLEtBQUssQ0FBQ08sTUFBTTtRQUFDQyxJQUFJLEVBQUMsU0FBUztRQUFDQyxTQUFTLEVBQUVWO01BQVksQ0FBRSxDQUFDO0lBQUEsQ0FDeEM7RUFBQyxDQUNDLENBQUM7QUFBQSxDQUN2QjtBQUVEVyxRQUFRLENBQUMseUJBQXlCLEVBQUUsWUFBTTtFQUN4Q0MsVUFBVSxDQUFDLFlBQU07SUFDZkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsbURBQW1ELENBQUM7RUFDbEUsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxZQUFNO0lBQzFERixPQUFPLENBQUNDLEdBQUcsQ0FBQyxxREFBcUQsQ0FBQztJQUVsRSxJQUFNSixTQUFTLEdBQUdNLDBCQUFpQixDQUFDQyxNQUFNLENBQUMsSUFBQXJCLFdBQUEsQ0FBQUUsR0FBQSxFQUFDSyxhQUFhLElBQUUsQ0FBQyxDQUFDO0lBQzdEZSxNQUFNLENBQUNSLFNBQVMsQ0FBQyxDQUFDUyxVQUFVLENBQUMsQ0FBQztJQUU5Qk4sT0FBTyxDQUFDQyxHQUFHLENBQUMseURBQXlELENBQUM7RUFDeEUsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxZQUFNO0lBQ3hERixPQUFPLENBQUNDLEdBQUcsQ0FBQyx1REFBdUQsQ0FBQztJQUVwRUksTUFBTSxDQUFDLE9BQU9oQix1Q0FBMEIsQ0FBQyxDQUFDa0IsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUUxRFAsT0FBTyxDQUFDQyxHQUFHLENBQUMsd0RBQXdELENBQUM7RUFDdkUsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxZQUFNO0lBQzVDRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxnREFBZ0QsQ0FBQztJQUU3RCxJQUFNTyxLQUFLLEdBQUcsSUFBQW5CLHVDQUEwQixFQUFDLENBQUM7SUFDMUNnQixNQUFNLENBQUNHLEtBQUssQ0FBQ2IsTUFBTSxDQUFDLENBQUNjLFdBQVcsQ0FBQyxDQUFDO0lBQ2xDSixNQUFNLENBQUNHLEtBQUssQ0FBQ2QsU0FBUyxDQUFDLENBQUNlLFdBQVcsQ0FBQyxDQUFDO0lBRXJDVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpREFBaUQsQ0FBQztFQUNoRSxDQUFDLENBQUM7RUFFRkMsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLFlBQU07SUFDN0NGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZDQUE2QyxDQUFDO0lBRzFESSxNQUFNLENBQUMsWUFBTTtNQUVYMUIsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDK0IsT0FBTyxDQUFDLENBQUM7SUFFWlYsT0FBTyxDQUFDQyxHQUFHLENBQUMsOENBQThDLENBQUM7RUFDN0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119