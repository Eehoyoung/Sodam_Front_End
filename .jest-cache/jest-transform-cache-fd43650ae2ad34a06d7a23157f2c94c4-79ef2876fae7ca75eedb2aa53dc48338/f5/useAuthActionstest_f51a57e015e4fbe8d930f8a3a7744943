b52b52fe9bb696af65653677c0ed2568
"use strict";

_getJestObj().mock('../../../features/auth/services/authService', function () {
  return {
    default: {
      login: jest.fn(),
      logout: jest.fn(),
      kakaoLogin: jest.fn(),
      getCurrentUser: jest.fn()
    }
  };
});
_getJestObj().mock('../../../utils/safeLogger', function () {
  return {
    safeLogger: {
      error: jest.fn()
    }
  };
});
_getJestObj().mock('../hooks/useStorage', function () {
  return {
    useStorage: function useStorage() {
      return {
        getItem: jest.fn(),
        removeItem: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAuthActions = require("../hooks/useAuthActions");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useAuthActions', function () {
  var mockAuthService;
  var mockSafeLogger;
  var mockGetItem;
  var mockRemoveItem;
  beforeEach(function () {
    jest.clearAllMocks();
    mockAuthService = require('../../../features/auth/services/authService').default;
    mockSafeLogger = require('../../../utils/safeLogger').safeLogger;
    var _require = require('../hooks/useStorage'),
      useStorage = _require.useStorage;
    var storage = useStorage();
    mockGetItem = storage.getItem;
    mockRemoveItem = storage.removeItem;
  });
  test('should provide all required methods', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook.result;
    expect(typeof result.current.login).toBe('function');
    expect(typeof result.current.logout).toBe('function');
    expect(typeof result.current.kakaoLogin).toBe('function');
    expect(typeof result.current.checkAuthStatus).toBe('function');
    expect(typeof result.current.isLoading).toBe('boolean');
  });
  test('should handle successful login', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@example.com'
    };
    mockAuthService.login.mockResolvedValue({
      user: mockUser
    });
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook2.result;
    var loginResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      loginResult = yield result.current.login('test@example.com', 'password');
    }));
    expect(mockAuthService.login).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'password'
    });
    expect(loginResult).toEqual({
      success: true,
      user: mockUser
    });
  }));
  test('should handle login failure', (0, _asyncToGenerator2.default)(function* () {
    mockAuthService.login.mockRejectedValue(new Error('Login failed'));
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook3.result;
    var loginResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      loginResult = yield result.current.login('test@example.com', 'wrong-password');
    }));
    expect(mockSafeLogger.error).toHaveBeenCalled();
    expect(loginResult).toEqual({
      success: false
    });
  }));
  test('should handle successful logout', (0, _asyncToGenerator2.default)(function* () {
    mockAuthService.logout.mockResolvedValue(undefined);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook4.result;
    var logoutResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      logoutResult = yield result.current.logout();
    }));
    expect(mockAuthService.logout).toHaveBeenCalled();
    expect(logoutResult).toEqual({
      success: true
    });
  }));
  test('should handle logout failure gracefully', (0, _asyncToGenerator2.default)(function* () {
    mockAuthService.logout.mockRejectedValue(new Error('Logout failed'));
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook5.result;
    var logoutResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      logoutResult = yield result.current.logout();
    }));
    expect(mockSafeLogger.error).toHaveBeenCalled();
    expect(logoutResult).toEqual({
      success: true
    });
  }));
  test('should handle successful kakao login', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@kakao.com'
    };
    mockAuthService.kakaoLogin.mockResolvedValue({
      token: 'kakao-token'
    });
    mockAuthService.getCurrentUser.mockResolvedValue(mockUser);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook6.result;
    var kakaoResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      kakaoResult = yield result.current.kakaoLogin('kakao-code');
    }));
    expect(mockAuthService.kakaoLogin).toHaveBeenCalledWith('kakao-code');
    expect(mockAuthService.getCurrentUser).toHaveBeenCalled();
    expect(kakaoResult).toEqual({
      success: true,
      user: mockUser
    });
  }));
  test('should handle kakao login failure', (0, _asyncToGenerator2.default)(function* () {
    mockAuthService.kakaoLogin.mockResolvedValue({
      token: null
    });
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook7.result;
    var kakaoResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      kakaoResult = yield result.current.kakaoLogin('invalid-code');
    }));
    expect(mockSafeLogger.error).toHaveBeenCalled();
    expect(kakaoResult).toEqual({
      success: false
    });
  }));
  test('should check auth status with valid token', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      id: '1',
      email: 'test@example.com'
    };
    mockGetItem.mockResolvedValue('valid-token');
    mockAuthService.getCurrentUser.mockResolvedValue(mockUser);
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook8.result;
    var authResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      authResult = yield result.current.checkAuthStatus();
    }));
    expect(mockGetItem).toHaveBeenCalledWith('userToken');
    expect(mockAuthService.getCurrentUser).toHaveBeenCalled();
    expect(authResult).toEqual({
      success: true,
      user: mockUser
    });
  }));
  test('should check auth status with no token', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue(null);
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook9.result;
    var authResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      authResult = yield result.current.checkAuthStatus();
    }));
    expect(mockGetItem).toHaveBeenCalledWith('userToken');
    expect(mockAuthService.getCurrentUser).not.toHaveBeenCalled();
    expect(authResult).toEqual({
      success: true,
      user: null
    });
  }));
  test('should handle auth check failure and remove invalid token', (0, _asyncToGenerator2.default)(function* () {
    mockGetItem.mockResolvedValue('invalid-token');
    mockAuthService.getCurrentUser.mockRejectedValue(new Error('Invalid token'));
    mockRemoveItem.mockResolvedValue(undefined);
    var _renderHook0 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook0.result;
    var authResult;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      authResult = yield result.current.checkAuthStatus();
    }));
    expect(mockRemoveItem).toHaveBeenCalledWith('userToken');
    expect(mockSafeLogger.error).toHaveBeenCalled();
    expect(authResult).toEqual({
      success: true,
      user: null
    });
  }));
  test('should provide consistent interface', function () {
    var _renderHook1 = (0, _reactNative.renderHook)(function () {
        return (0, _useAuthActions.useAuthActions)();
      }),
      result = _renderHook1.result;
    expect(result.current).toHaveProperty('login');
    expect(result.current).toHaveProperty('logout');
    expect(result.current).toHaveProperty('kakaoLogin');
    expect(result.current).toHaveProperty('checkAuthStatus');
    expect(result.current).toHaveProperty('isLoading');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,