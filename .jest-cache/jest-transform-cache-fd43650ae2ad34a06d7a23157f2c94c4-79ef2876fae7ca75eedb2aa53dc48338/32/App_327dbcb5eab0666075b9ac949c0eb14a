b7aad57b3bca41f6918a7fa779f6ed13
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _ErrorBoundary = _interopRequireDefault(require("./src/components/ErrorBoundary"));
var _InitializationErrorBoundary = _interopRequireDefault(require("./src/components/InitializationErrorBoundary"));
var _colors = require("./src/theme/colors");
var _typography = require("./src/theme/typography");
var _ThemeProvider = _interopRequireDefault(require("./src/common/providers/ThemeProvider"));
var _config = require("./src/navigation/config");
var _AuthMockProvider = _interopRequireDefault(require("./src/contexts/AuthMockProvider"));
var _AuthContext = require("./src/contexts/AuthContext");
var _reactQuery = require("@tanstack/react-query");
var _queryClient = require("./src/common/utils/queryClient");
var _NativeModuleValidator = require("./src/utils/NativeModuleValidator");
var _contextReadiness = require("./src/utils/contextReadiness");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var App = function App() {
  var contextManager = (0, _contextReadiness.getContextReadinessManager)();
  (0, _react.useEffect)(function () {
    console.log('[RECOVERY] App baseline mounted');
    if (typeof global !== 'undefined' && !global.__APP_START_TIME__) {
      global.__APP_START_TIME__ = Date.now();
    }
  }, []);
  try {
    if (_config.ENABLE_SCREENS_NATIVE && (0, _config.stageAtLeast)(7)) {
      var screens = require('react-native-screens');
      if (typeof (screens == null ? void 0 : screens.enableScreens) === 'function') {
        screens.enableScreens(true);
      }
    }
  } catch (e) {
    console.warn('[RECOVERY] enableScreens skipped:', (e == null ? void 0 : e.message) || e);
  }
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    appReady = _useState2[0],
    setAppReady = _useState2[1];
  (0, _react.useEffect)(function () {
    var task = _reactNative.InteractionManager.runAfterInteractions(function () {
      setAppReady(true);
      console.log('[RECOVERY] App interaction readiness achieved');
    });
    return function () {
      task == null || task.cancel == null || task.cancel();
    };
  }, []);
  var _useState3 = (0, _react.useState)(contextManager.isContextReady()),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    contextReady = _useState4[0],
    setContextReady = _useState4[1];
  (0, _react.useEffect)(function () {
    if (contextManager.isContextReady()) return;
    contextManager.onReady(function () {
      setContextReady(true);
    });
  }, [contextManager]);
  var _useState5 = (0, _react.useState)({
      isValid: false,
      isLoading: true
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    validation = _useState6[0],
    setValidation = _useState6[1];
  (0, _react.useEffect)(function () {
    var mounted = true;
    var validate = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          console.log('[RECOVERY] Starting critical module validation');
          var ok = yield _NativeModuleValidator.CriticalModuleValidator.performCriticalValidation();
          if (!mounted) return;
          if (!ok) {
            var res = _NativeModuleValidator.CriticalModuleValidator.validateGestureHandler();
            setValidation({
              isValid: false,
              isLoading: false,
              error: res.error
            });
            console.warn('[RECOVERY] Critical module validation failed:', res.error);
          } else {
            setValidation({
              isValid: true,
              isLoading: false
            });
            console.log('[RECOVERY] Critical module validation successful');
            if (appReady) {
              _reactNative.InteractionManager.runAfterInteractions(function () {
                requestAnimationFrame(function () {
                  contextManager.signalReady();
                  (0, _contextReadiness.logContextReadinessTiming)();
                });
              });
            }
          }
        } catch (e) {
          var _e$message;
          if (!mounted) return;
          console.error('[RECOVERY] Critical module validation error:', e);
          setValidation({
            isValid: false,
            isLoading: false,
            error: (_e$message = e == null ? void 0 : e.message) != null ? _e$message : String(e)
          });
        }
      });
      return function validate() {
        return _ref.apply(this, arguments);
      };
    }();
    validate();
    return function () {
      mounted = false;
    };
  }, [appReady, contextManager]);
  (0, _react.useEffect)(function () {
    if (validation.isValid && appReady && !contextManager.isContextReady()) {
      _reactNative.InteractionManager.runAfterInteractions(function () {
        requestAnimationFrame(function () {
          contextManager.signalReady();
          (0, _contextReadiness.logContextReadinessTiming)();
        });
      });
    }
  }, [validation.isValid, appReady, contextManager]);
  if (validation.isLoading) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center'
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "large",
        color: _colors.colors.brandPrimary
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          marginTop: 12,
          color: _colors.colors.textSecondary
        },
        children: "Validating native modules..."
      })]
    });
  }
  if (!validation.isValid) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 16
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          fontSize: _typography.typography.sizes.md,
          color: _colors.colors.textPrimary,
          textAlign: 'center'
        },
        children: "Critical native modules failed validation."
      }), validation.error ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          marginTop: 8,
          color: _colors.colors.textSecondary,
          textAlign: 'center'
        },
        children: validation.error
      }) : null]
    });
  }
  if (!contextReady) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center'
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "large",
        color: _colors.colors.brandPrimary
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: {
          marginTop: 12,
          color: _colors.colors.textSecondary
        },
        children: "Preparing UI..."
      })]
    });
  }
  var AppNavigator = require('./src/navigation/AppNavigator').default;
  var NavigatorTree = (0, _jsxRuntime.jsx)(AppNavigator, {
    appReady: appReady
  });
  var WrappedByLocalBoundary = (0, _config.stageAtLeast)(16) ? (0, _jsxRuntime.jsx)(_ErrorBoundary.default, {
    children: NavigatorTree
  }) : NavigatorTree;
  var WithRealAuth = (0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
    children: WrappedByLocalBoundary
  });
  var WithAuthMock = (0, _config.stageAtLeast)(17) ? (0, _jsxRuntime.jsx)(_AuthMockProvider.default, {
    children: WithRealAuth
  }) : WithRealAuth;
  var handleTimingIssue = function handleTimingIssue(error, errorInfo) {
    console.warn('[TIMING_COORDINATION] ReactNoCrashSoftException detected during app lifecycle');
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: {
      flex: 1
    },
    children: (0, _jsxRuntime.jsx)(_InitializationErrorBoundary.default, {
      onTimingIssue: handleTimingIssue,
      children: (0, _jsxRuntime.jsx)(_reactQuery.QueryClientProvider, {
        client: _queryClient.queryClient,
        children: (0, _jsxRuntime.jsx)(_reactNativeSafeAreaContext.SafeAreaProvider, {
          children: (0, _jsxRuntime.jsx)(_ErrorBoundary.default, {
            children: (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
              children: WithAuthMock
            })
          })
        })
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: _colors.colors.background
  },
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16
  },
  title: {
    fontSize: _typography.typography.sizes.xl,
    fontWeight: _typography.typography.weights.bold,
    marginBottom: 8,
    color: _colors.colors.textPrimary
  },
  subtitle: {
    fontSize: _typography.typography.sizes.md,
    color: _colors.colors.textSecondary,
    marginBottom: 16,
    textAlign: 'center'
  },
  body: {
    fontSize: _typography.typography.sizes.sm,
    color: _colors.colors.textTertiary,
    textAlign: 'center'
  }
});
var _default = exports.default = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,