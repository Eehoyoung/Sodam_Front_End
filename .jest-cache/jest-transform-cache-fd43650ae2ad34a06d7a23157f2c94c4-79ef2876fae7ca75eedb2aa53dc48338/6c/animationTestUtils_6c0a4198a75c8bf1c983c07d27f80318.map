{"version":3,"names":["_reactTestRenderer","require","_constants","AnimationPerformanceMeasurer","exports","animationName","_classCallCheck2","default","startTime","endTime","frameCount","frameStartTime","_createClass2","key","value","start","performance","now","recordFrame","end","duration","averageFPS","frameDrops","Math","max","floor","PERFORMANCE_CONSTANTS","FRAME_TIME_MS","getMetrics","AnimationValidators","validateOpacityAnimation","sharedValue","expectedValue","tolerance","arguments","length","undefined","actualValue","abs","validateScaleAnimation","validateTranslationAnimation","validateAnimationDuration","actualDuration","expectedDuration","toleranceMs","validateFrameRate","actualFPS","targetFPS","TARGET_FPS","AnimationTestHelpers","waitForAnimation","_waitForAnimation","_asyncToGenerator2","bufferMs","Promise","resolve","setTimeout","_x","apply","executeAnimationTest","_executeAnimationTest","testName","animationFunction","config","_config$timeout","timeout","_config$expectedDurat","ANIMATION_DURATIONS","NORMAL","_config$toleranceMs","_config$checkFrameRat","checkFrameRate","_config$targetFPS","measurer","success","error","act","metrics","durationValid","frameRateValid","frameRate","e","Error","message","_x2","_x3","createMockSharedValue","initialValue","addListener","jest","fn","removeListener","modify","modifier","simulateFrameUpdates","frameInterval","i","AnimationTestScenarios","testFadeIn","_testFadeIn","opacityValue","result","opacityValid","ANIMATION_VALUES","OPACITY","VISIBLE","_x4","_x5","_x6","testFadeOut","_testFadeOut","HIDDEN","_x7","_x8","_x9","testScaleAnimation","_testScaleAnimation","scaleValue","expectedScale","scaleValid","_x0","_x1","_x10","_x11","testSlideAnimation","_testSlideAnimation","translateValue","expectedPosition","translationValid","_x12","_x13","_x14","_x15","PerformanceBenchmark","benchmarkAnimation","_benchmarkAnimation","runs","results","push","successfulResults","filter","r","durations","map","frameRates","fps","averageDuration","reduce","sum","d","minDuration","min","_toConsumableArray2","maxDuration","successRate","_x16","_x17","compareAnimations","_compareAnimations","animation1","animation2","_yield$Promise$all","all","_yield$Promise$all2","_slicedToArray2","benchmark1","benchmark2","winner","improvement","_x18","_x19","_x20","TestSetup","setupAnimationTesting","global","Date","originalConsoleLog","console","log","originalConsoleWarn","warn","restore","setupMockTimers","useFakeTimers","advanceTime","ms","advanceTimersByTime","useRealTimers"],"sources":["animationTestUtils.ts"],"sourcesContent":["/**\r\n * Animation Test Utilities\r\n *\r\n * This file contains utilities for testing animations including\r\n * performance measurement, validation helpers, and test setup functions.\r\n */\r\n\r\nimport {act} from 'react-test-renderer';\r\nimport {SharedValue} from 'react-native-reanimated';\r\nimport {ANIMATION_DURATIONS, ANIMATION_VALUES, PERFORMANCE_CONSTANTS,} from '../constants';\r\nimport type {AnimationPerformanceMetrics, AnimationTestConfig, AnimationTestResult,} from '../types';\r\n\r\n// Performance measurement utilities\r\nexport class AnimationPerformanceMeasurer {\r\n    private startTime: number = 0;\r\n    private endTime: number = 0;\r\n    private animationName: string;\r\n    private frameCount: number = 0;\r\n    private frameStartTime: number = 0;\r\n\r\n    constructor(animationName: string) {\r\n        this.animationName = animationName;\r\n    }\r\n\r\n    start(): void {\r\n        this.startTime = performance.now();\r\n        this.frameStartTime = this.startTime;\r\n        this.frameCount = 0;\r\n    }\r\n\r\n    recordFrame(): void {\r\n        this.frameCount++;\r\n    }\r\n\r\n    end(): AnimationPerformanceMetrics {\r\n        this.endTime = performance.now();\r\n        const duration = this.endTime - this.startTime;\r\n        const averageFPS = this.frameCount > 0 ? (this.frameCount / (duration / 1000)) : 0;\r\n        const frameDrops = Math.max(0, Math.floor((duration / PERFORMANCE_CONSTANTS.FRAME_TIME_MS) - this.frameCount));\r\n\r\n        return {\r\n            animationName: this.animationName,\r\n            startTime: this.startTime,\r\n            endTime: this.endTime,\r\n            duration,\r\n            frameDrops,\r\n            averageFPS,\r\n        };\r\n    }\r\n\r\n    getMetrics(): AnimationPerformanceMetrics | null {\r\n        if (this.startTime === 0) return null;\r\n\r\n        return this.end();\r\n    }\r\n}\r\n\r\n// Animation validation helpers\r\nexport const AnimationValidators = {\r\n    /**\r\n     * Validates that an opacity animation reaches the expected value\r\n     */\r\n    validateOpacityAnimation: (\r\n        sharedValue: SharedValue<number>,\r\n        expectedValue: number,\r\n        tolerance: number = 0.01\r\n    ): boolean => {\r\n        const actualValue = sharedValue.value;\r\n        return Math.abs(actualValue - expectedValue) <= tolerance;\r\n    },\r\n\r\n    /**\r\n     * Validates that a scale animation reaches the expected value\r\n     */\r\n    validateScaleAnimation: (\r\n        sharedValue: SharedValue<number>,\r\n        expectedValue: number,\r\n        tolerance: number = 0.01\r\n    ): boolean => {\r\n        const actualValue = sharedValue.value;\r\n        return Math.abs(actualValue - expectedValue) <= tolerance;\r\n    },\r\n\r\n    /**\r\n     * Validates that a translation animation reaches the expected value\r\n     */\r\n    validateTranslationAnimation: (\r\n        sharedValue: SharedValue<number>,\r\n        expectedValue: number,\r\n        tolerance: number = 1\r\n    ): boolean => {\r\n        const actualValue = sharedValue.value;\r\n        return Math.abs(actualValue - expectedValue) <= tolerance;\r\n    },\r\n\r\n    /**\r\n     * Validates that an animation completes within the expected duration\r\n     */\r\n    validateAnimationDuration: (\r\n        actualDuration: number,\r\n        expectedDuration: number,\r\n        toleranceMs: number = 50\r\n    ): boolean => {\r\n        return Math.abs(actualDuration - expectedDuration) <= toleranceMs;\r\n    },\r\n\r\n    /**\r\n     * Validates that frame rate meets performance requirements\r\n     */\r\n    validateFrameRate: (\r\n        actualFPS: number,\r\n        targetFPS: number = PERFORMANCE_CONSTANTS.TARGET_FPS,\r\n        tolerance: number = 0.1\r\n    ): boolean => {\r\n        return actualFPS >= (targetFPS * (1 - tolerance));\r\n    },\r\n};\r\n\r\n// Test execution helpers\r\nexport const AnimationTestHelpers = {\r\n    /**\r\n     * Waits for an animation to complete\r\n     */\r\n    waitForAnimation: async (\r\n        duration: number,\r\n        bufferMs: number = 100\r\n    ): Promise<void> => {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, duration + bufferMs);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Executes an animation test with performance monitoring\r\n     */\r\n    executeAnimationTest: async (\r\n        testName: string,\r\n        animationFunction: () => void,\r\n        config: AnimationTestConfig = {}\r\n    ): Promise<AnimationTestResult> => {\r\n        const {\r\n            timeout = 5000,\r\n            expectedDuration = ANIMATION_DURATIONS.NORMAL,\r\n            toleranceMs = 50,\r\n            checkFrameRate = false,\r\n            targetFPS = PERFORMANCE_CONSTANTS.TARGET_FPS,\r\n        } = config;\r\n\r\n        const measurer = new AnimationPerformanceMeasurer(testName);\r\n        let success = false;\r\n        let error: string | undefined;\r\n\r\n        try {\r\n            measurer.start();\r\n\r\n            await act(async () => {\r\n                animationFunction();\r\n                await AnimationTestHelpers.waitForAnimation(expectedDuration);\r\n            });\r\n\r\n            const metrics = measurer.end();\r\n\r\n            // Validate duration\r\n            const durationValid = AnimationValidators.validateAnimationDuration(\r\n                metrics.duration,\r\n                expectedDuration,\r\n                toleranceMs\r\n            );\r\n\r\n            // Validate frame rate if requested\r\n            let frameRateValid = true;\r\n            if (checkFrameRate && metrics.averageFPS) {\r\n                frameRateValid = AnimationValidators.validateFrameRate(\r\n                    metrics.averageFPS,\r\n                    targetFPS\r\n                );\r\n            }\r\n\r\n            success = durationValid && frameRateValid;\r\n\r\n            if (!success) {\r\n                error = `Animation validation failed. Duration: ${metrics.duration}ms (expected: ${expectedDuration}ms), FPS: ${metrics.averageFPS}`;\r\n            }\r\n\r\n            return {\r\n                success,\r\n                actualDuration: metrics.duration,\r\n                expectedDuration,\r\n                frameRate: metrics.averageFPS,\r\n                error,\r\n            };\r\n        } catch (e) {\r\n            return {\r\n                success: false,\r\n                actualDuration: 0,\r\n                expectedDuration,\r\n                error: e instanceof Error ? e.message : 'Unknown error',\r\n            };\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Creates a mock SharedValue for testing\r\n     */\r\n    createMockSharedValue: <T>(initialValue: T): SharedValue<T> => {\r\n        let value = initialValue;\r\n\r\n        return {\r\n            value,\r\n            addListener: jest.fn(),\r\n            removeListener: jest.fn(),\r\n            modify: jest.fn((modifier) => {\r\n                value = modifier(value);\r\n                return value;\r\n            }),\r\n        } as unknown as SharedValue<T>;\r\n    },\r\n\r\n    /**\r\n     * Simulates frame updates for performance testing\r\n     */\r\n    simulateFrameUpdates: (\r\n        measurer: AnimationPerformanceMeasurer,\r\n        duration: number,\r\n        targetFPS: number = 60\r\n    ): void => {\r\n        const frameInterval = 1000 / targetFPS;\r\n        const frameCount = Math.floor(duration / frameInterval);\r\n\r\n        for (let i = 0; i < frameCount; i++) {\r\n            setTimeout(() => {\r\n                measurer.recordFrame();\r\n            }, i * frameInterval);\r\n        }\r\n    },\r\n};\r\n\r\n// Common test scenarios\r\nexport const AnimationTestScenarios = {\r\n    /**\r\n     * Tests a fade in animation\r\n     */\r\n    testFadeIn: async (\r\n        opacityValue: SharedValue<number>,\r\n        animationFunction: () => void,\r\n        config?: AnimationTestConfig\r\n    ): Promise<AnimationTestResult> => {\r\n        const result = await AnimationTestHelpers.executeAnimationTest(\r\n            'fadeIn',\r\n            animationFunction,\r\n            config\r\n        );\r\n\r\n        // Additional validation for fade in\r\n        if (result.success) {\r\n            const opacityValid = AnimationValidators.validateOpacityAnimation(\r\n                opacityValue,\r\n                ANIMATION_VALUES.OPACITY.VISIBLE\r\n            );\r\n\r\n            if (!opacityValid) {\r\n                result.success = false;\r\n                result.error = `Opacity validation failed. Expected: ${ANIMATION_VALUES.OPACITY.VISIBLE}, Actual: ${opacityValue.value}`;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Tests a fade out animation\r\n     */\r\n    testFadeOut: async (\r\n        opacityValue: SharedValue<number>,\r\n        animationFunction: () => void,\r\n        config?: AnimationTestConfig\r\n    ): Promise<AnimationTestResult> => {\r\n        const result = await AnimationTestHelpers.executeAnimationTest(\r\n            'fadeOut',\r\n            animationFunction,\r\n            config\r\n        );\r\n\r\n        // Additional validation for fade out\r\n        if (result.success) {\r\n            const opacityValid = AnimationValidators.validateOpacityAnimation(\r\n                opacityValue,\r\n                ANIMATION_VALUES.OPACITY.HIDDEN\r\n            );\r\n\r\n            if (!opacityValid) {\r\n                result.success = false;\r\n                result.error = `Opacity validation failed. Expected: ${ANIMATION_VALUES.OPACITY.HIDDEN}, Actual: ${opacityValue.value}`;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Tests a scale animation\r\n     */\r\n    testScaleAnimation: async (\r\n        scaleValue: SharedValue<number>,\r\n        expectedScale: number,\r\n        animationFunction: () => void,\r\n        config?: AnimationTestConfig\r\n    ): Promise<AnimationTestResult> => {\r\n        const result = await AnimationTestHelpers.executeAnimationTest(\r\n            'scaleAnimation',\r\n            animationFunction,\r\n            config\r\n        );\r\n\r\n        // Additional validation for scale\r\n        if (result.success) {\r\n            const scaleValid = AnimationValidators.validateScaleAnimation(\r\n                scaleValue,\r\n                expectedScale\r\n            );\r\n\r\n            if (!scaleValid) {\r\n                result.success = false;\r\n                result.error = `Scale validation failed. Expected: ${expectedScale}, Actual: ${scaleValue.value}`;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Tests a slide animation\r\n     */\r\n    testSlideAnimation: async (\r\n        translateValue: SharedValue<number>,\r\n        expectedPosition: number,\r\n        animationFunction: () => void,\r\n        config?: AnimationTestConfig\r\n    ): Promise<AnimationTestResult> => {\r\n        const result = await AnimationTestHelpers.executeAnimationTest(\r\n            'slideAnimation',\r\n            animationFunction,\r\n            config\r\n        );\r\n\r\n        // Additional validation for translation\r\n        if (result.success) {\r\n            const translationValid = AnimationValidators.validateTranslationAnimation(\r\n                translateValue,\r\n                expectedPosition\r\n            );\r\n\r\n            if (!translationValid) {\r\n                result.success = false;\r\n                result.error = `Translation validation failed. Expected: ${expectedPosition}, Actual: ${translateValue.value}`;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n};\r\n\r\n// Performance benchmarking utilities\r\nexport const PerformanceBenchmark = {\r\n    /**\r\n     * Benchmarks animation performance across multiple runs\r\n     */\r\n    benchmarkAnimation: async (\r\n        testName: string,\r\n        animationFunction: () => void,\r\n        runs: number = 10,\r\n        config?: AnimationTestConfig\r\n    ): Promise<{\r\n        averageDuration: number;\r\n        minDuration: number;\r\n        maxDuration: number;\r\n        averageFPS: number;\r\n        successRate: number;\r\n    }> => {\r\n        const results: AnimationTestResult[] = [];\r\n\r\n        for (let i = 0; i < runs; i++) {\r\n            const result = await AnimationTestHelpers.executeAnimationTest(\r\n                `${testName}_run_${i + 1}`,\r\n                animationFunction,\r\n                config\r\n            );\r\n            results.push(result);\r\n        }\r\n\r\n        const successfulResults = results.filter(r => r.success);\r\n        const durations = results.map(r => r.actualDuration);\r\n        const frameRates = results.map(r => r.frameRate || 0).filter(fps => fps > 0);\r\n\r\n        return {\r\n            averageDuration: durations.reduce((sum, d) => sum + d, 0) / durations.length,\r\n            minDuration: Math.min(...durations),\r\n            maxDuration: Math.max(...durations),\r\n            averageFPS: frameRates.length > 0 ? frameRates.reduce((sum, fps) => sum + fps, 0) / frameRates.length : 0,\r\n            successRate: successfulResults.length / results.length,\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Compares performance between two animation implementations\r\n     */\r\n    compareAnimations: async (\r\n        testName: string,\r\n        animation1: () => void,\r\n        animation2: () => void,\r\n        runs: number = 5,\r\n        config?: AnimationTestConfig\r\n    ): Promise<{\r\n        animation1: any;\r\n        animation2: any;\r\n        winner: 'animation1' | 'animation2' | 'tie';\r\n        improvement: number;\r\n    }> => {\r\n        const [benchmark1, benchmark2] = await Promise.all([\r\n            PerformanceBenchmark.benchmarkAnimation(`${testName}_v1`, animation1, runs, config),\r\n            PerformanceBenchmark.benchmarkAnimation(`${testName}_v2`, animation2, runs, config),\r\n        ]);\r\n\r\n        let winner: 'animation1' | 'animation2' | 'tie' = 'tie';\r\n        let improvement = 0;\r\n\r\n        if (benchmark1.averageDuration < benchmark2.averageDuration) {\r\n            winner = 'animation1';\r\n            improvement = ((benchmark2.averageDuration - benchmark1.averageDuration) / benchmark2.averageDuration) * 100;\r\n        } else if (benchmark2.averageDuration < benchmark1.averageDuration) {\r\n            winner = 'animation2';\r\n            improvement = ((benchmark1.averageDuration - benchmark2.averageDuration) / benchmark1.averageDuration) * 100;\r\n        }\r\n\r\n        return {\r\n            animation1: benchmark1,\r\n            animation2: benchmark2,\r\n            winner,\r\n            improvement,\r\n        };\r\n    },\r\n};\r\n\r\n// Test setup and teardown utilities\r\nexport const TestSetup = {\r\n    /**\r\n     * Sets up the test environment for animation testing\r\n     */\r\n    setupAnimationTesting: () => {\r\n        // Mock performance.now if not available\r\n        if (typeof performance === 'undefined') {\r\n            (global as any).performance = {\r\n                now: () => Date.now(),\r\n            };\r\n        }\r\n\r\n        // Mock console methods for cleaner test output\r\n        const originalConsoleLog = console.log;\r\n        const originalConsoleWarn = console.warn;\r\n\r\n        console.log = jest.fn();\r\n        console.warn = jest.fn();\r\n\r\n        return {\r\n            restore: () => {\r\n                console.log = originalConsoleLog;\r\n                console.warn = originalConsoleWarn;\r\n            },\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Creates a test environment with mocked timers\r\n     */\r\n    setupMockTimers: () => {\r\n        jest.useFakeTimers();\r\n\r\n        return {\r\n            advanceTime: (ms: number) => {\r\n                jest.advanceTimersByTime(ms);\r\n            },\r\n            restore: () => {\r\n                jest.useRealTimers();\r\n            },\r\n        };\r\n    },\r\n};\r\n"],"mappings":"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","ignoreList":[]}