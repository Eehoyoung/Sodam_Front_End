d0643788d622aeff22eca3d7e67a3394
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestSetup = exports.PerformanceBenchmark = exports.AnimationValidators = exports.AnimationTestScenarios = exports.AnimationTestHelpers = exports.AnimationPerformanceMeasurer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactTestRenderer = require("react-test-renderer");
var _constants = require("../constants");
var AnimationPerformanceMeasurer = exports.AnimationPerformanceMeasurer = function () {
  function AnimationPerformanceMeasurer(animationName) {
    (0, _classCallCheck2.default)(this, AnimationPerformanceMeasurer);
    this.startTime = 0;
    this.endTime = 0;
    this.frameCount = 0;
    this.frameStartTime = 0;
    this.animationName = animationName;
  }
  return (0, _createClass2.default)(AnimationPerformanceMeasurer, [{
    key: "start",
    value: function start() {
      this.startTime = performance.now();
      this.frameStartTime = this.startTime;
      this.frameCount = 0;
    }
  }, {
    key: "recordFrame",
    value: function recordFrame() {
      this.frameCount++;
    }
  }, {
    key: "end",
    value: function end() {
      this.endTime = performance.now();
      var duration = this.endTime - this.startTime;
      var averageFPS = this.frameCount > 0 ? this.frameCount / (duration / 1000) : 0;
      var frameDrops = Math.max(0, Math.floor(duration / _constants.PERFORMANCE_CONSTANTS.FRAME_TIME_MS - this.frameCount));
      return {
        animationName: this.animationName,
        startTime: this.startTime,
        endTime: this.endTime,
        duration: duration,
        frameDrops: frameDrops,
        averageFPS: averageFPS
      };
    }
  }, {
    key: "getMetrics",
    value: function getMetrics() {
      if (this.startTime === 0) return null;
      return this.end();
    }
  }]);
}();
var AnimationValidators = exports.AnimationValidators = {
  validateOpacityAnimation: function validateOpacityAnimation(sharedValue, expectedValue) {
    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;
    var actualValue = sharedValue.value;
    return Math.abs(actualValue - expectedValue) <= tolerance;
  },
  validateScaleAnimation: function validateScaleAnimation(sharedValue, expectedValue) {
    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;
    var actualValue = sharedValue.value;
    return Math.abs(actualValue - expectedValue) <= tolerance;
  },
  validateTranslationAnimation: function validateTranslationAnimation(sharedValue, expectedValue) {
    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var actualValue = sharedValue.value;
    return Math.abs(actualValue - expectedValue) <= tolerance;
  },
  validateAnimationDuration: function validateAnimationDuration(actualDuration, expectedDuration) {
    var toleranceMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
    return Math.abs(actualDuration - expectedDuration) <= toleranceMs;
  },
  validateFrameRate: function validateFrameRate(actualFPS) {
    var targetFPS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.PERFORMANCE_CONSTANTS.TARGET_FPS;
    var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
    return actualFPS >= targetFPS * (1 - tolerance);
  }
};
var AnimationTestHelpers = exports.AnimationTestHelpers = {
  waitForAnimation: function () {
    var _waitForAnimation = (0, _asyncToGenerator2.default)(function* (duration) {
      var bufferMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      return new Promise(function (resolve) {
        setTimeout(resolve, duration + bufferMs);
      });
    });
    function waitForAnimation(_x) {
      return _waitForAnimation.apply(this, arguments);
    }
    return waitForAnimation;
  }(),
  executeAnimationTest: function () {
    var _executeAnimationTest = (0, _asyncToGenerator2.default)(function* (testName, animationFunction) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _config$timeout = config.timeout,
        timeout = _config$timeout === void 0 ? 5000 : _config$timeout,
        _config$expectedDurat = config.expectedDuration,
        expectedDuration = _config$expectedDurat === void 0 ? _constants.ANIMATION_DURATIONS.NORMAL : _config$expectedDurat,
        _config$toleranceMs = config.toleranceMs,
        toleranceMs = _config$toleranceMs === void 0 ? 50 : _config$toleranceMs,
        _config$checkFrameRat = config.checkFrameRate,
        checkFrameRate = _config$checkFrameRat === void 0 ? false : _config$checkFrameRat,
        _config$targetFPS = config.targetFPS,
        targetFPS = _config$targetFPS === void 0 ? _constants.PERFORMANCE_CONSTANTS.TARGET_FPS : _config$targetFPS;
      var measurer = new AnimationPerformanceMeasurer(testName);
      var success = false;
      var error;
      try {
        measurer.start();
        yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
          animationFunction();
          yield AnimationTestHelpers.waitForAnimation(expectedDuration);
        }));
        var metrics = measurer.end();
        var durationValid = AnimationValidators.validateAnimationDuration(metrics.duration, expectedDuration, toleranceMs);
        var frameRateValid = true;
        if (checkFrameRate && metrics.averageFPS) {
          frameRateValid = AnimationValidators.validateFrameRate(metrics.averageFPS, targetFPS);
        }
        success = durationValid && frameRateValid;
        if (!success) {
          error = `Animation validation failed. Duration: ${metrics.duration}ms (expected: ${expectedDuration}ms), FPS: ${metrics.averageFPS}`;
        }
        return {
          success: success,
          actualDuration: metrics.duration,
          expectedDuration: expectedDuration,
          frameRate: metrics.averageFPS,
          error: error
        };
      } catch (e) {
        return {
          success: false,
          actualDuration: 0,
          expectedDuration: expectedDuration,
          error: e instanceof Error ? e.message : 'Unknown error'
        };
      }
    });
    function executeAnimationTest(_x2, _x3) {
      return _executeAnimationTest.apply(this, arguments);
    }
    return executeAnimationTest;
  }(),
  createMockSharedValue: function createMockSharedValue(initialValue) {
    var value = initialValue;
    return {
      value: value,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      modify: jest.fn(function (modifier) {
        value = modifier(value);
        return value;
      })
    };
  },
  simulateFrameUpdates: function simulateFrameUpdates(measurer, duration) {
    var targetFPS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
    var frameInterval = 1000 / targetFPS;
    var frameCount = Math.floor(duration / frameInterval);
    for (var i = 0; i < frameCount; i++) {
      setTimeout(function () {
        measurer.recordFrame();
      }, i * frameInterval);
    }
  }
};
var AnimationTestScenarios = exports.AnimationTestScenarios = {
  testFadeIn: function () {
    var _testFadeIn = (0, _asyncToGenerator2.default)(function* (opacityValue, animationFunction, config) {
      var result = yield AnimationTestHelpers.executeAnimationTest('fadeIn', animationFunction, config);
      if (result.success) {
        var opacityValid = AnimationValidators.validateOpacityAnimation(opacityValue, _constants.ANIMATION_VALUES.OPACITY.VISIBLE);
        if (!opacityValid) {
          result.success = false;
          result.error = `Opacity validation failed. Expected: ${_constants.ANIMATION_VALUES.OPACITY.VISIBLE}, Actual: ${opacityValue.value}`;
        }
      }
      return result;
    });
    function testFadeIn(_x4, _x5, _x6) {
      return _testFadeIn.apply(this, arguments);
    }
    return testFadeIn;
  }(),
  testFadeOut: function () {
    var _testFadeOut = (0, _asyncToGenerator2.default)(function* (opacityValue, animationFunction, config) {
      var result = yield AnimationTestHelpers.executeAnimationTest('fadeOut', animationFunction, config);
      if (result.success) {
        var opacityValid = AnimationValidators.validateOpacityAnimation(opacityValue, _constants.ANIMATION_VALUES.OPACITY.HIDDEN);
        if (!opacityValid) {
          result.success = false;
          result.error = `Opacity validation failed. Expected: ${_constants.ANIMATION_VALUES.OPACITY.HIDDEN}, Actual: ${opacityValue.value}`;
        }
      }
      return result;
    });
    function testFadeOut(_x7, _x8, _x9) {
      return _testFadeOut.apply(this, arguments);
    }
    return testFadeOut;
  }(),
  testScaleAnimation: function () {
    var _testScaleAnimation = (0, _asyncToGenerator2.default)(function* (scaleValue, expectedScale, animationFunction, config) {
      var result = yield AnimationTestHelpers.executeAnimationTest('scaleAnimation', animationFunction, config);
      if (result.success) {
        var scaleValid = AnimationValidators.validateScaleAnimation(scaleValue, expectedScale);
        if (!scaleValid) {
          result.success = false;
          result.error = `Scale validation failed. Expected: ${expectedScale}, Actual: ${scaleValue.value}`;
        }
      }
      return result;
    });
    function testScaleAnimation(_x0, _x1, _x10, _x11) {
      return _testScaleAnimation.apply(this, arguments);
    }
    return testScaleAnimation;
  }(),
  testSlideAnimation: function () {
    var _testSlideAnimation = (0, _asyncToGenerator2.default)(function* (translateValue, expectedPosition, animationFunction, config) {
      var result = yield AnimationTestHelpers.executeAnimationTest('slideAnimation', animationFunction, config);
      if (result.success) {
        var translationValid = AnimationValidators.validateTranslationAnimation(translateValue, expectedPosition);
        if (!translationValid) {
          result.success = false;
          result.error = `Translation validation failed. Expected: ${expectedPosition}, Actual: ${translateValue.value}`;
        }
      }
      return result;
    });
    function testSlideAnimation(_x12, _x13, _x14, _x15) {
      return _testSlideAnimation.apply(this, arguments);
    }
    return testSlideAnimation;
  }()
};
var PerformanceBenchmark = exports.PerformanceBenchmark = {
  benchmarkAnimation: function () {
    var _benchmarkAnimation = (0, _asyncToGenerator2.default)(function* (testName, animationFunction) {
      var runs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
      var config = arguments.length > 3 ? arguments[3] : undefined;
      var results = [];
      for (var i = 0; i < runs; i++) {
        var result = yield AnimationTestHelpers.executeAnimationTest(`${testName}_run_${i + 1}`, animationFunction, config);
        results.push(result);
      }
      var successfulResults = results.filter(function (r) {
        return r.success;
      });
      var durations = results.map(function (r) {
        return r.actualDuration;
      });
      var frameRates = results.map(function (r) {
        return r.frameRate || 0;
      }).filter(function (fps) {
        return fps > 0;
      });
      return {
        averageDuration: durations.reduce(function (sum, d) {
          return sum + d;
        }, 0) / durations.length,
        minDuration: Math.min.apply(Math, (0, _toConsumableArray2.default)(durations)),
        maxDuration: Math.max.apply(Math, (0, _toConsumableArray2.default)(durations)),
        averageFPS: frameRates.length > 0 ? frameRates.reduce(function (sum, fps) {
          return sum + fps;
        }, 0) / frameRates.length : 0,
        successRate: successfulResults.length / results.length
      };
    });
    function benchmarkAnimation(_x16, _x17) {
      return _benchmarkAnimation.apply(this, arguments);
    }
    return benchmarkAnimation;
  }(),
  compareAnimations: function () {
    var _compareAnimations = (0, _asyncToGenerator2.default)(function* (testName, animation1, animation2) {
      var runs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
      var config = arguments.length > 4 ? arguments[4] : undefined;
      var _yield$Promise$all = yield Promise.all([PerformanceBenchmark.benchmarkAnimation(`${testName}_v1`, animation1, runs, config), PerformanceBenchmark.benchmarkAnimation(`${testName}_v2`, animation2, runs, config)]),
        _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
        benchmark1 = _yield$Promise$all2[0],
        benchmark2 = _yield$Promise$all2[1];
      var winner = 'tie';
      var improvement = 0;
      if (benchmark1.averageDuration < benchmark2.averageDuration) {
        winner = 'animation1';
        improvement = (benchmark2.averageDuration - benchmark1.averageDuration) / benchmark2.averageDuration * 100;
      } else if (benchmark2.averageDuration < benchmark1.averageDuration) {
        winner = 'animation2';
        improvement = (benchmark1.averageDuration - benchmark2.averageDuration) / benchmark1.averageDuration * 100;
      }
      return {
        animation1: benchmark1,
        animation2: benchmark2,
        winner: winner,
        improvement: improvement
      };
    });
    function compareAnimations(_x18, _x19, _x20) {
      return _compareAnimations.apply(this, arguments);
    }
    return compareAnimations;
  }()
};
var TestSetup = exports.TestSetup = {
  setupAnimationTesting: function setupAnimationTesting() {
    if (typeof performance === 'undefined') {
      global.performance = {
        now: function now() {
          return Date.now();
        }
      };
    }
    var originalConsoleLog = console.log;
    var originalConsoleWarn = console.warn;
    console.log = jest.fn();
    console.warn = jest.fn();
    return {
      restore: function restore() {
        console.log = originalConsoleLog;
        console.warn = originalConsoleWarn;
      }
    };
  },
  setupMockTimers: function setupMockTimers() {
    jest.useFakeTimers();
    return {
      advanceTime: function advanceTime(ms) {
        jest.advanceTimersByTime(ms);
      },
      restore: function restore() {
        jest.useRealTimers();
      }
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,